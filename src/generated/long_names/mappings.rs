//! Bidirectional mappings between long names and code points

use crate::read::code_point::*;
use phf::phf_map;
use super::constants::*;

// Static CodePoint constants for PHF map
const CP_AACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AACUTE);
const CP_ABAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ABAR);
const CP_ACUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ACUP);
const CP_ADOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ADOUBLEDOT);
const CP_AE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AE);
const CP_AGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AGRAVE);
const CP_AHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AHAT);
const CP_AKUZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AKUZ);
const CP_ALEPH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALEPH);
const CP_ALIASDELIMITER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALIASDELIMITER);
const CP_ALIASINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALIASINDICATOR);
const CP_ALIGNMENTMARKER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALIGNMENTMARKER);
const CP_ALPHA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALPHA);
const CP_ALTKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ALTKEY);
const CP_AND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AND);
const CP_ANDY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ANDY);
const CP_ANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ANGLE);
const CP_ANGSTROM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ANGSTROM);
const CP_APPLICATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_APPLICATION);
const CP_AQUARIUSSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AQUARIUSSIGN);
const CP_ARIESSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ARIESSIGN);
const CP_ARING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ARING);
const CP_ASCENDINGELLIPSIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ASCENDINGELLIPSIS);
const CP_ATILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ATILDE);
const CP_AUTOLEFTMATCH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AUTOLEFTMATCH);
const CP_AUTOOPERAND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AUTOOPERAND);
const CP_AUTOPLACEHOLDER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AUTOPLACEHOLDER);
const CP_AUTORIGHTMATCH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AUTORIGHTMATCH);
const CP_AUTOSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_AUTOSPACE);
const CP_BACKSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BACKSLASH);
const CP_BEAMEDEIGHTHNOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BEAMEDEIGHTHNOTE);
const CP_BEAMEDSIXTEENTHNOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BEAMEDSIXTEENTHNOTE);
const CP_BECAUSE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BECAUSE);
const CP_BET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BET);
const CP_BETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BETA);
const CP_BLACKBISHOP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKBISHOP);
const CP_BLACKKING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKKING);
const CP_BLACKKNIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKKNIGHT);
const CP_BLACKPAWN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKPAWN);
const CP_BLACKQUEEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKQUEEN);
const CP_BLACKROOK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BLACKROOK);
const CP_BREVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BREVE);
const CP_BULLET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_BULLET);
const CP_CACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CACUTE);
const CP_CANCERSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CANCERSIGN);
const CP_CAP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAP);
const CP_CAPITALAACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALAACUTE);
const CP_CAPITALABAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALABAR);
const CP_CAPITALACUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALACUP);
const CP_CAPITALADOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALADOUBLEDOT);
const CP_CAPITALAE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALAE);
const CP_CAPITALAGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALAGRAVE);
const CP_CAPITALAHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALAHAT);
const CP_CAPITALALPHA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALALPHA);
const CP_CAPITALARING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALARING);
const CP_CAPITALATILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALATILDE);
const CP_CAPITALBETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALBETA);
const CP_CAPITALCACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALCACUTE);
const CP_CAPITALCCEDILLA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALCCEDILLA);
const CP_CAPITALCHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALCHACEK);
const CP_CAPITALCHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALCHI);
const CP_CAPITALDELTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALDELTA);
const CP_CAPITALDHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALDHACEK);
const CP_CAPITALDIFFERENTIALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALDIFFERENTIALD);
const CP_CAPITALDIGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALDIGAMMA);
const CP_CAPITALEACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEACUTE);
const CP_CAPITALEBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEBAR);
const CP_CAPITALECUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALECUP);
const CP_CAPITALEDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEDOUBLEDOT);
const CP_CAPITALEGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEGRAVE);
const CP_CAPITALEHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEHACEK);
const CP_CAPITALEHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEHAT);
const CP_CAPITALEPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALEPSILON);
const CP_CAPITALETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALETA);
const CP_CAPITALETH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALETH);
const CP_CAPITALGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALGAMMA);
const CP_CAPITALIACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALIACUTE);
const CP_CAPITALICUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALICUP);
const CP_CAPITALIDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALIDOUBLEDOT);
const CP_CAPITALIGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALIGRAVE);
const CP_CAPITALIHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALIHAT);
const CP_CAPITALIOTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALIOTA);
const CP_CAPITALKAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALKAPPA);
const CP_CAPITALKOPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALKOPPA);
const CP_CAPITALLAMBDA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALLAMBDA);
const CP_CAPITALLSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALLSLASH);
const CP_CAPITALMU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALMU);
const CP_CAPITALNHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALNHACEK);
const CP_CAPITALNTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALNTILDE);
const CP_CAPITALNU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALNU);
const CP_CAPITALOACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOACUTE);
const CP_CAPITALODOUBLEACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALODOUBLEACUTE);
const CP_CAPITALODOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALODOUBLEDOT);
const CP_CAPITALOE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOE);
const CP_CAPITALOGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOGRAVE);
const CP_CAPITALOHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOHAT);
const CP_CAPITALOMEGA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOMEGA);
const CP_CAPITALOMICRON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOMICRON);
const CP_CAPITALOSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOSLASH);
const CP_CAPITALOTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALOTILDE);
const CP_CAPITALPHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALPHI);
const CP_CAPITALPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALPI);
const CP_CAPITALPSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALPSI);
const CP_CAPITALRHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALRHACEK);
const CP_CAPITALRHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALRHO);
const CP_CAPITALSAMPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALSAMPI);
const CP_CAPITALSHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALSHACEK);
const CP_CAPITALSIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALSIGMA);
const CP_CAPITALSTIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALSTIGMA);
const CP_CAPITALTAU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALTAU);
const CP_CAPITALTHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALTHACEK);
const CP_CAPITALTHETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALTHETA);
const CP_CAPITALTHORN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALTHORN);
const CP_CAPITALUACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUACUTE);
const CP_CAPITALUDOUBLEACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUDOUBLEACUTE);
const CP_CAPITALUDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUDOUBLEDOT);
const CP_CAPITALUGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUGRAVE);
const CP_CAPITALUHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUHAT);
const CP_CAPITALUPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALUPSILON);
const CP_CAPITALURING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALURING);
const CP_CAPITALXI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALXI);
const CP_CAPITALYACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALYACUTE);
const CP_CAPITALZETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALZETA);
const CP_CAPITALZHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPITALZHACEK);
const CP_CAPRICORNSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CAPRICORNSIGN);
const CP_CCEDILLA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CCEDILLA);
const CP_CEDILLA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CEDILLA);
const CP_CENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CENT);
const CP_CENTERDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CENTERDOT);
const CP_CENTERELLIPSIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CENTERELLIPSIS);
const CP_CHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CHACEK);
const CP_CHECKEDBOX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CHECKEDBOX);
const CP_CHECKMARK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CHECKMARK);
const CP_CHECKMARKEDBOX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CHECKMARKEDBOX);
const CP_CHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CHI);
const CP_CIRCLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CIRCLEDOT);
const CP_CIRCLEMINUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CIRCLEMINUS);
const CP_CIRCLEPLUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CIRCLEPLUS);
const CP_CIRCLETIMES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CIRCLETIMES);
const CP_CLOCKWISECONTOURINTEGRAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CLOCKWISECONTOURINTEGRAL);
const CP_CLOSECURLYDOUBLEQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CLOSECURLYDOUBLEQUOTE);
const CP_CLOSECURLYQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CLOSECURLYQUOTE);
const CP_CLOVERLEAF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CLOVERLEAF);
const CP_CLUBSUIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CLUBSUIT);
const CP_COLON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COLON);
const CP_COMMANDKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COMMANDKEY);
const CP_COMPATIBILITYKANJISPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COMPATIBILITYKANJISPACE);
const CP_COMPATIBILITYNOBREAK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COMPATIBILITYNOBREAK);
const CP_CONDITIONED: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONDITIONED);
const CP_CONGRUENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONGRUENT);
const CP_CONJUGATE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONJUGATE);
const CP_CONJUGATETRANSPOSE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONJUGATETRANSPOSE);
const CP_CONSTANTC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONSTANTC);
const CP_CONTINUATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONTINUATION);
const CP_CONTINUEDFRACTIONK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONTINUEDFRACTIONK);
const CP_CONTOURINTEGRAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONTOURINTEGRAL);
const CP_CONTROLKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CONTROLKEY);
const CP_COPRODUCT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COPRODUCT);
const CP_COPYRIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COPYRIGHT);
const CP_COUNTERCLOCKWISECONTOURINTEGRAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_COUNTERCLOCKWISECONTOURINTEGRAL);
const CP_CROSS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CROSS);
const CP_CUBEROOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CUBEROOT);
const CP_CUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CUP);
const CP_CUPCAP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CUPCAP);
const CP_CURLYCAPITALUPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYCAPITALUPSILON);
const CP_CURLYEPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYEPSILON);
const CP_CURLYKAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYKAPPA);
const CP_CURLYPHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYPHI);
const CP_CURLYPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYPI);
const CP_CURLYRHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYRHO);
const CP_CURLYTHETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURLYTHETA);
const CP_CURRENCY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_CURRENCY);
const CP_DAGGER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DAGGER);
const CP_DALET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DALET);
const CP_DASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DASH);
const CP_DEGREE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DEGREE);
const CP_DEL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DEL);
const CP_DELETEKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DELETEKEY);
const CP_DELTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DELTA);
const CP_DESCENDINGELLIPSIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DESCENDINGELLIPSIS);
const CP_DHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DHACEK);
const CP_DIAMETER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIAMETER);
const CP_DIAMOND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIAMOND);
const CP_DIAMONDSUIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIAMONDSUIT);
const CP_DIFFERENCEDELTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIFFERENCEDELTA);
const CP_DIFFERENTIALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIFFERENTIALD);
const CP_DIGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIGAMMA);
const CP_DIRECTEDEDGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIRECTEDEDGE);
const CP_DISCRETERATIO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETERATIO);
const CP_DISCRETESHIFT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETESHIFT);
const CP_DISCRETIONARYHYPHEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETIONARYHYPHEN);
const CP_DISCRETIONARYLINESEPARATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETIONARYLINESEPARATOR);
const CP_DISCRETIONARYPAGEBREAKABOVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETIONARYPAGEBREAKABOVE);
const CP_DISCRETIONARYPAGEBREAKBELOW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETIONARYPAGEBREAKBELOW);
const CP_DISCRETIONARYPARAGRAPHSEPARATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISCRETIONARYPARAGRAPHSEPARATOR);
const CP_DISTRIBUTED: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DISTRIBUTED);
const CP_DIVIDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIVIDE);
const CP_DIVIDES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIVIDES);
const CP_DIVISIONSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DIVISIONSLASH);
const CP_DOTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOTEQUAL);
const CP_DOTLESSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOTLESSI);
const CP_DOTLESSJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOTLESSJ);
const CP_DOTTEDSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOTTEDSQUARE);
const CP_DOUBLECONTOURINTEGRAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLECONTOURINTEGRAL);
const CP_DOUBLEDAGGER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEDAGGER);
const CP_DOUBLEDGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEDGAMMA);
const CP_DOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEDOT);
const CP_DOUBLEDOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEDOWNARROW);
const CP_DOUBLEDPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEDPI);
const CP_DOUBLELEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELEFTARROW);
const CP_DOUBLELEFTRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELEFTRIGHTARROW);
const CP_DOUBLELEFTTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELEFTTEE);
const CP_DOUBLELONGLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELONGLEFTARROW);
const CP_DOUBLELONGLEFTRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELONGLEFTRIGHTARROW);
const CP_DOUBLELONGRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLELONGRIGHTARROW);
const CP_DOUBLEPRIME: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEPRIME);
const CP_DOUBLERIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLERIGHTARROW);
const CP_DOUBLERIGHTTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLERIGHTTEE);
const CP_DOUBLESTRUCKA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKA);
const CP_DOUBLESTRUCKB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKB);
const CP_DOUBLESTRUCKC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKC);
const CP_DOUBLESTRUCKCAPITALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALA);
const CP_DOUBLESTRUCKCAPITALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALB);
const CP_DOUBLESTRUCKCAPITALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALC);
const CP_DOUBLESTRUCKCAPITALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALD);
const CP_DOUBLESTRUCKCAPITALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALE);
const CP_DOUBLESTRUCKCAPITALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALF);
const CP_DOUBLESTRUCKCAPITALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALG);
const CP_DOUBLESTRUCKCAPITALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALH);
const CP_DOUBLESTRUCKCAPITALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALI);
const CP_DOUBLESTRUCKCAPITALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALJ);
const CP_DOUBLESTRUCKCAPITALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALK);
const CP_DOUBLESTRUCKCAPITALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALL);
const CP_DOUBLESTRUCKCAPITALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALM);
const CP_DOUBLESTRUCKCAPITALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALN);
const CP_DOUBLESTRUCKCAPITALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALO);
const CP_DOUBLESTRUCKCAPITALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALP);
const CP_DOUBLESTRUCKCAPITALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALQ);
const CP_DOUBLESTRUCKCAPITALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALR);
const CP_DOUBLESTRUCKCAPITALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALS);
const CP_DOUBLESTRUCKCAPITALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALT);
const CP_DOUBLESTRUCKCAPITALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALU);
const CP_DOUBLESTRUCKCAPITALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALV);
const CP_DOUBLESTRUCKCAPITALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALW);
const CP_DOUBLESTRUCKCAPITALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALX);
const CP_DOUBLESTRUCKCAPITALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALY);
const CP_DOUBLESTRUCKCAPITALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKCAPITALZ);
const CP_DOUBLESTRUCKD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKD);
const CP_DOUBLESTRUCKE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKE);
const CP_DOUBLESTRUCKEIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKEIGHT);
const CP_DOUBLESTRUCKF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKF);
const CP_DOUBLESTRUCKFIVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKFIVE);
const CP_DOUBLESTRUCKFOUR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKFOUR);
const CP_DOUBLESTRUCKG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKG);
const CP_DOUBLESTRUCKH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKH);
const CP_DOUBLESTRUCKI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKI);
const CP_DOUBLESTRUCKJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKJ);
const CP_DOUBLESTRUCKK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKK);
const CP_DOUBLESTRUCKL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKL);
const CP_DOUBLESTRUCKM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKM);
const CP_DOUBLESTRUCKN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKN);
const CP_DOUBLESTRUCKNINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKNINE);
const CP_DOUBLESTRUCKO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKO);
const CP_DOUBLESTRUCKONE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKONE);
const CP_DOUBLESTRUCKP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKP);
const CP_DOUBLESTRUCKQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKQ);
const CP_DOUBLESTRUCKR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKR);
const CP_DOUBLESTRUCKS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKS);
const CP_DOUBLESTRUCKSEVEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKSEVEN);
const CP_DOUBLESTRUCKSIX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKSIX);
const CP_DOUBLESTRUCKT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKT);
const CP_DOUBLESTRUCKTHREE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKTHREE);
const CP_DOUBLESTRUCKTWO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKTWO);
const CP_DOUBLESTRUCKU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKU);
const CP_DOUBLESTRUCKV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKV);
const CP_DOUBLESTRUCKW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKW);
const CP_DOUBLESTRUCKX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKX);
const CP_DOUBLESTRUCKY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKY);
const CP_DOUBLESTRUCKZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKZ);
const CP_DOUBLESTRUCKZERO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLESTRUCKZERO);
const CP_DOUBLEUPARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEUPARROW);
const CP_DOUBLEUPDOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEUPDOWNARROW);
const CP_DOUBLEVERTICALBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOUBLEVERTICALBAR);
const CP_DOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNARROW);
const CP_DOWNARROWBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNARROWBAR);
const CP_DOWNARROWUPARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNARROWUPARROW);
const CP_DOWNBREVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNBREVE);
const CP_DOWNEXCLAMATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNEXCLAMATION);
const CP_DOWNLEFTRIGHTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNLEFTRIGHTVECTOR);
const CP_DOWNLEFTTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNLEFTTEEVECTOR);
const CP_DOWNLEFTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNLEFTVECTOR);
const CP_DOWNLEFTVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNLEFTVECTORBAR);
const CP_DOWNPOINTER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNPOINTER);
const CP_DOWNQUESTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNQUESTION);
const CP_DOWNRIGHTTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNRIGHTTEEVECTOR);
const CP_DOWNRIGHTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNRIGHTVECTOR);
const CP_DOWNRIGHTVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNRIGHTVECTORBAR);
const CP_DOWNTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNTEE);
const CP_DOWNTEEARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_DOWNTEEARROW);
const CP_EACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EACUTE);
const CP_EARTH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EARTH);
const CP_EBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EBAR);
const CP_ECUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ECUP);
const CP_EDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EDOUBLEDOT);
const CP_EGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EGRAVE);
const CP_EHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EHACEK);
const CP_EHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EHAT);
const CP_EIGHTHNOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EIGHTHNOTE);
const CP_ELEMENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ELEMENT);
const CP_ELLIPSIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ELLIPSIS);
const CP_EMPTYCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYCIRCLE);
const CP_EMPTYDIAMOND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYDIAMOND);
const CP_EMPTYDOWNTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYDOWNTRIANGLE);
const CP_EMPTYRECTANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYRECTANGLE);
const CP_EMPTYSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYSET);
const CP_EMPTYSMALLCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYSMALLCIRCLE);
const CP_EMPTYSMALLSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYSMALLSQUARE);
const CP_EMPTYSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYSQUARE);
const CP_EMPTYUPTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYUPTRIANGLE);
const CP_EMPTYVERYSMALLSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EMPTYVERYSMALLSQUARE);
const CP_ENTERKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ENTERKEY);
const CP_ENTITYEND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ENTITYEND);
const CP_ENTITYSTART: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ENTITYSTART);
const CP_EPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EPSILON);
const CP_EQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EQUAL);
const CP_EQUALTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EQUALTILDE);
const CP_EQUILIBRIUM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EQUILIBRIUM);
const CP_EQUIVALENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EQUIVALENT);
const CP_ERRORINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ERRORINDICATOR);
const CP_ESCAPEKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ESCAPEKEY);
const CP_ETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ETA);
const CP_ETH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ETH);
const CP_EURO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EURO);
const CP_EXISTS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EXISTS);
const CP_EXPECTATIONE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EXPECTATIONE);
const CP_EXPONENTIALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_EXPONENTIALE);
const CP_FILIGATURE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILIGATURE);
const CP_FILLEDCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDCIRCLE);
const CP_FILLEDDIAMOND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDDIAMOND);
const CP_FILLEDDOWNTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDDOWNTRIANGLE);
const CP_FILLEDLEFTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDLEFTTRIANGLE);
const CP_FILLEDRECTANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDRECTANGLE);
const CP_FILLEDRIGHTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDRIGHTTRIANGLE);
const CP_FILLEDSMALLCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDSMALLCIRCLE);
const CP_FILLEDSMALLSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDSMALLSQUARE);
const CP_FILLEDSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDSQUARE);
const CP_FILLEDUPTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDUPTRIANGLE);
const CP_FILLEDVERYSMALLSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FILLEDVERYSMALLSQUARE);
const CP_FINALSIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FINALSIGMA);
const CP_FIRSTPAGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FIRSTPAGE);
const CP_FIVEPOINTEDSTAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FIVEPOINTEDSTAR);
const CP_FLAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FLAT);
const CP_FLLIGATURE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FLLIGATURE);
const CP_FLORIN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FLORIN);
const CP_FORALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORALL);
const CP_FORMALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALA);
const CP_FORMALALPHA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALALPHA);
const CP_FORMALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALB);
const CP_FORMALBETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALBETA);
const CP_FORMALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALC);
const CP_FORMALCAPITALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALA);
const CP_FORMALCAPITALALPHA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALALPHA);
const CP_FORMALCAPITALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALB);
const CP_FORMALCAPITALBETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALBETA);
const CP_FORMALCAPITALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALC);
const CP_FORMALCAPITALCHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALCHI);
const CP_FORMALCAPITALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALD);
const CP_FORMALCAPITALDELTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALDELTA);
const CP_FORMALCAPITALDIGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALDIGAMMA);
const CP_FORMALCAPITALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALE);
const CP_FORMALCAPITALEPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALEPSILON);
const CP_FORMALCAPITALETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALETA);
const CP_FORMALCAPITALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALF);
const CP_FORMALCAPITALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALG);
const CP_FORMALCAPITALGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALGAMMA);
const CP_FORMALCAPITALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALH);
const CP_FORMALCAPITALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALI);
const CP_FORMALCAPITALIOTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALIOTA);
const CP_FORMALCAPITALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALJ);
const CP_FORMALCAPITALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALK);
const CP_FORMALCAPITALKAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALKAPPA);
const CP_FORMALCAPITALKOPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALKOPPA);
const CP_FORMALCAPITALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALL);
const CP_FORMALCAPITALLAMBDA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALLAMBDA);
const CP_FORMALCAPITALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALM);
const CP_FORMALCAPITALMU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALMU);
const CP_FORMALCAPITALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALN);
const CP_FORMALCAPITALNU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALNU);
const CP_FORMALCAPITALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALO);
const CP_FORMALCAPITALOMEGA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALOMEGA);
const CP_FORMALCAPITALOMICRON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALOMICRON);
const CP_FORMALCAPITALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALP);
const CP_FORMALCAPITALPHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALPHI);
const CP_FORMALCAPITALPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALPI);
const CP_FORMALCAPITALPSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALPSI);
const CP_FORMALCAPITALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALQ);
const CP_FORMALCAPITALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALR);
const CP_FORMALCAPITALRHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALRHO);
const CP_FORMALCAPITALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALS);
const CP_FORMALCAPITALSAMPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALSAMPI);
const CP_FORMALCAPITALSIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALSIGMA);
const CP_FORMALCAPITALSTIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALSTIGMA);
const CP_FORMALCAPITALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALT);
const CP_FORMALCAPITALTAU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALTAU);
const CP_FORMALCAPITALTHETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALTHETA);
const CP_FORMALCAPITALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALU);
const CP_FORMALCAPITALUPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALUPSILON);
const CP_FORMALCAPITALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALV);
const CP_FORMALCAPITALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALW);
const CP_FORMALCAPITALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALX);
const CP_FORMALCAPITALXI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALXI);
const CP_FORMALCAPITALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALY);
const CP_FORMALCAPITALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALZ);
const CP_FORMALCAPITALZETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCAPITALZETA);
const CP_FORMALCHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCHI);
const CP_FORMALCURLYCAPITALUPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYCAPITALUPSILON);
const CP_FORMALCURLYEPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYEPSILON);
const CP_FORMALCURLYKAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYKAPPA);
const CP_FORMALCURLYPHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYPHI);
const CP_FORMALCURLYPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYPI);
const CP_FORMALCURLYRHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYRHO);
const CP_FORMALCURLYTHETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALCURLYTHETA);
const CP_FORMALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALD);
const CP_FORMALDELTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALDELTA);
const CP_FORMALDIGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALDIGAMMA);
const CP_FORMALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALE);
const CP_FORMALEPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALEPSILON);
const CP_FORMALETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALETA);
const CP_FORMALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALF);
const CP_FORMALFINALSIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALFINALSIGMA);
const CP_FORMALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALG);
const CP_FORMALGAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALGAMMA);
const CP_FORMALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALH);
const CP_FORMALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALI);
const CP_FORMALIOTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALIOTA);
const CP_FORMALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALJ);
const CP_FORMALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALK);
const CP_FORMALKAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALKAPPA);
const CP_FORMALKOPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALKOPPA);
const CP_FORMALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALL);
const CP_FORMALLAMBDA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALLAMBDA);
const CP_FORMALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALM);
const CP_FORMALMU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALMU);
const CP_FORMALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALN);
const CP_FORMALNU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALNU);
const CP_FORMALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALO);
const CP_FORMALOMEGA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALOMEGA);
const CP_FORMALOMICRON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALOMICRON);
const CP_FORMALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALP);
const CP_FORMALPHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALPHI);
const CP_FORMALPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALPI);
const CP_FORMALPSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALPSI);
const CP_FORMALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALQ);
const CP_FORMALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALR);
const CP_FORMALRHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALRHO);
const CP_FORMALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALS);
const CP_FORMALSAMPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSAMPI);
const CP_FORMALSCRIPTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTA);
const CP_FORMALSCRIPTB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTB);
const CP_FORMALSCRIPTC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTC);
const CP_FORMALSCRIPTCAPITALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALA);
const CP_FORMALSCRIPTCAPITALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALB);
const CP_FORMALSCRIPTCAPITALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALC);
const CP_FORMALSCRIPTCAPITALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALD);
const CP_FORMALSCRIPTCAPITALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALE);
const CP_FORMALSCRIPTCAPITALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALF);
const CP_FORMALSCRIPTCAPITALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALG);
const CP_FORMALSCRIPTCAPITALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALH);
const CP_FORMALSCRIPTCAPITALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALI);
const CP_FORMALSCRIPTCAPITALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALJ);
const CP_FORMALSCRIPTCAPITALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALK);
const CP_FORMALSCRIPTCAPITALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALL);
const CP_FORMALSCRIPTCAPITALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALM);
const CP_FORMALSCRIPTCAPITALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALN);
const CP_FORMALSCRIPTCAPITALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALO);
const CP_FORMALSCRIPTCAPITALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALP);
const CP_FORMALSCRIPTCAPITALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALQ);
const CP_FORMALSCRIPTCAPITALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALR);
const CP_FORMALSCRIPTCAPITALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALS);
const CP_FORMALSCRIPTCAPITALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALT);
const CP_FORMALSCRIPTCAPITALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALU);
const CP_FORMALSCRIPTCAPITALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALV);
const CP_FORMALSCRIPTCAPITALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALW);
const CP_FORMALSCRIPTCAPITALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALX);
const CP_FORMALSCRIPTCAPITALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALY);
const CP_FORMALSCRIPTCAPITALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTCAPITALZ);
const CP_FORMALSCRIPTD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTD);
const CP_FORMALSCRIPTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTE);
const CP_FORMALSCRIPTF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTF);
const CP_FORMALSCRIPTG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTG);
const CP_FORMALSCRIPTH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTH);
const CP_FORMALSCRIPTI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTI);
const CP_FORMALSCRIPTJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTJ);
const CP_FORMALSCRIPTK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTK);
const CP_FORMALSCRIPTL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTL);
const CP_FORMALSCRIPTM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTM);
const CP_FORMALSCRIPTN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTN);
const CP_FORMALSCRIPTO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTO);
const CP_FORMALSCRIPTP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTP);
const CP_FORMALSCRIPTQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTQ);
const CP_FORMALSCRIPTR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTR);
const CP_FORMALSCRIPTS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTS);
const CP_FORMALSCRIPTT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTT);
const CP_FORMALSCRIPTU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTU);
const CP_FORMALSCRIPTV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTV);
const CP_FORMALSCRIPTW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTW);
const CP_FORMALSCRIPTX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTX);
const CP_FORMALSCRIPTY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTY);
const CP_FORMALSCRIPTZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSCRIPTZ);
const CP_FORMALSIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSIGMA);
const CP_FORMALSTIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALSTIGMA);
const CP_FORMALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALT);
const CP_FORMALTAU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALTAU);
const CP_FORMALTHETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALTHETA);
const CP_FORMALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALU);
const CP_FORMALUPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALUPSILON);
const CP_FORMALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALV);
const CP_FORMALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALW);
const CP_FORMALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALX);
const CP_FORMALXI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALXI);
const CP_FORMALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALY);
const CP_FORMALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALZ);
const CP_FORMALZETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FORMALZETA);
const CP_FREAKEDSMILEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FREAKEDSMILEY);
const CP_FREEFORMPROMPT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FREEFORMPROMPT);
const CP_FUNCTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_FUNCTION);
const CP_GAMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GAMMA);
const CP_GEMINISIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GEMINISIGN);
const CP_GIMEL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GIMEL);
const CP_GOTHICA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICA);
const CP_GOTHICB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICB);
const CP_GOTHICC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICC);
const CP_GOTHICCAPITALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALA);
const CP_GOTHICCAPITALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALB);
const CP_GOTHICCAPITALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALC);
const CP_GOTHICCAPITALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALD);
const CP_GOTHICCAPITALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALE);
const CP_GOTHICCAPITALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALF);
const CP_GOTHICCAPITALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALG);
const CP_GOTHICCAPITALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALH);
const CP_GOTHICCAPITALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALI);
const CP_GOTHICCAPITALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALJ);
const CP_GOTHICCAPITALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALK);
const CP_GOTHICCAPITALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALL);
const CP_GOTHICCAPITALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALM);
const CP_GOTHICCAPITALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALN);
const CP_GOTHICCAPITALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALO);
const CP_GOTHICCAPITALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALP);
const CP_GOTHICCAPITALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALQ);
const CP_GOTHICCAPITALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALR);
const CP_GOTHICCAPITALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALS);
const CP_GOTHICCAPITALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALT);
const CP_GOTHICCAPITALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALU);
const CP_GOTHICCAPITALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALV);
const CP_GOTHICCAPITALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALW);
const CP_GOTHICCAPITALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALX);
const CP_GOTHICCAPITALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALY);
const CP_GOTHICCAPITALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICCAPITALZ);
const CP_GOTHICD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICD);
const CP_GOTHICE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICE);
const CP_GOTHICEIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICEIGHT);
const CP_GOTHICF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICF);
const CP_GOTHICFIVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICFIVE);
const CP_GOTHICFOUR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICFOUR);
const CP_GOTHICG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICG);
const CP_GOTHICH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICH);
const CP_GOTHICI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICI);
const CP_GOTHICJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICJ);
const CP_GOTHICK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICK);
const CP_GOTHICL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICL);
const CP_GOTHICM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICM);
const CP_GOTHICN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICN);
const CP_GOTHICNINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICNINE);
const CP_GOTHICO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICO);
const CP_GOTHICONE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICONE);
const CP_GOTHICP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICP);
const CP_GOTHICQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICQ);
const CP_GOTHICR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICR);
const CP_GOTHICS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICS);
const CP_GOTHICSEVEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICSEVEN);
const CP_GOTHICSIX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICSIX);
const CP_GOTHICT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICT);
const CP_GOTHICTHREE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICTHREE);
const CP_GOTHICTWO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICTWO);
const CP_GOTHICU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICU);
const CP_GOTHICV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICV);
const CP_GOTHICW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICW);
const CP_GOTHICX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICX);
const CP_GOTHICY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICY);
const CP_GOTHICZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICZ);
const CP_GOTHICZERO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GOTHICZERO);
const CP_GRAYCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GRAYCIRCLE);
const CP_GRAYSQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GRAYSQUARE);
const CP_GREATEREQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATEREQUAL);
const CP_GREATEREQUALLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATEREQUALLESS);
const CP_GREATERFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATERFULLEQUAL);
const CP_GREATERGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATERGREATER);
const CP_GREATERLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATERLESS);
const CP_GREATERSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATERSLANTEQUAL);
const CP_GREATERTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_GREATERTILDE);
const CP_HACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HACEK);
const CP_HAPPYSMILEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HAPPYSMILEY);
const CP_HBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HBAR);
const CP_HEARTSUIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HEARTSUIT);
const CP_HERMITIANCONJUGATE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HERMITIANCONJUGATE);
const CP_HORIZONTALLINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HORIZONTALLINE);
const CP_HUMPDOWNHUMP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HUMPDOWNHUMP);
const CP_HUMPEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HUMPEQUAL);
const CP_HYPHEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_HYPHEN);
const CP_IACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IACUTE);
const CP_ICUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ICUP);
const CP_IDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IDOUBLEDOT);
const CP_IGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IGRAVE);
const CP_IHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IHAT);
const CP_IMAGINARYI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IMAGINARYI);
const CP_IMAGINARYJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IMAGINARYJ);
const CP_IMPLICITPLUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IMPLICITPLUS);
const CP_IMPLIES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IMPLIES);
const CP_INDENTINGNEWLINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INDENTINGNEWLINE);
const CP_INFINITY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INFINITY);
const CP_INLINEPART: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INLINEPART);
const CP_INTEGRAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INTEGRAL);
const CP_INTERSECTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INTERSECTION);
const CP_INVISIBLEAPPLICATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLEAPPLICATION);
const CP_INVISIBLECOMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLECOMMA);
const CP_INVISIBLEPOSTFIXSCRIPTBASE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLEPOSTFIXSCRIPTBASE);
const CP_INVISIBLEPREFIXSCRIPTBASE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLEPREFIXSCRIPTBASE);
const CP_INVISIBLESPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLESPACE);
const CP_INVISIBLETIMES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_INVISIBLETIMES);
const CP_IOTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_IOTA);
const CP_JUPITER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_JUPITER);
const CP_KAPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_KAPPA);
const CP_KERNELICON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_KERNELICON);
const CP_KEYBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_KEYBAR);
const CP_KOPPA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_KOPPA);
const CP_LAMBDA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LAMBDA);
const CP_LASTPAGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LASTPAGE);
const CP_LEFTANGLEBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTANGLEBRACKET);
const CP_LEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTARROW);
const CP_LEFTARROWBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTARROWBAR);
const CP_LEFTARROWRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTARROWRIGHTARROW);
const CP_LEFTASSOCIATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTASSOCIATION);
const CP_LEFTBRACKETINGBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTBRACKETINGBAR);
const CP_LEFTCEILING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTCEILING);
const CP_LEFTDOUBLEBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTDOUBLEBRACKET);
const CP_LEFTDOUBLEBRACKETINGBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTDOUBLEBRACKETINGBAR);
const CP_LEFTDOWNTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTDOWNTEEVECTOR);
const CP_LEFTDOWNVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTDOWNVECTOR);
const CP_LEFTDOWNVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTDOWNVECTORBAR);
const CP_LEFTFLOOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTFLOOR);
const CP_LEFTGUILLEMET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTGUILLEMET);
const CP_LEFTMODIFIED: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTMODIFIED);
const CP_LEFTPOINTER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTPOINTER);
const CP_LEFTRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTRIGHTARROW);
const CP_LEFTRIGHTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTRIGHTVECTOR);
const CP_LEFTSKELETON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTSKELETON);
const CP_LEFTTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTEE);
const CP_LEFTTEEARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTEEARROW);
const CP_LEFTTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTEEVECTOR);
const CP_LEFTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTRIANGLE);
const CP_LEFTTRIANGLEBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTRIANGLEBAR);
const CP_LEFTTRIANGLEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTTRIANGLEEQUAL);
const CP_LEFTUPDOWNVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTUPDOWNVECTOR);
const CP_LEFTUPTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTUPTEEVECTOR);
const CP_LEFTUPVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTUPVECTOR);
const CP_LEFTUPVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTUPVECTORBAR);
const CP_LEFTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTVECTOR);
const CP_LEFTVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEFTVECTORBAR);
const CP_LEOSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LEOSIGN);
const CP_LESSEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSEQUAL);
const CP_LESSEQUALGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSEQUALGREATER);
const CP_LESSFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSFULLEQUAL);
const CP_LESSGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSGREATER);
const CP_LESSLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSLESS);
const CP_LESSSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSSLANTEQUAL);
const CP_LESSTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LESSTILDE);
const CP_LETTERSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LETTERSPACE);
const CP_LIBRASIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LIBRASIGN);
const CP_LIGHTBULB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LIGHTBULB);
const CP_LIMIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LIMIT);
const CP_LINESEPARATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LINESEPARATOR);
const CP_LONGDASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LONGDASH);
const CP_LONGEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LONGEQUAL);
const CP_LONGLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LONGLEFTARROW);
const CP_LONGLEFTRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LONGLEFTRIGHTARROW);
const CP_LONGRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LONGRIGHTARROW);
const CP_LOWERLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LOWERLEFTARROW);
const CP_LOWERRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LOWERRIGHTARROW);
const CP_LSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_LSLASH);
const CP_MARS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MARS);
const CP_MATHEMATICAICON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MATHEMATICAICON);
const CP_MAXLIMIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MAXLIMIT);
const CP_MEASUREDANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MEASUREDANGLE);
const CP_MEDIUMSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MEDIUMSPACE);
const CP_MERCURY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MERCURY);
const CP_MHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MHO);
const CP_MICRO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MICRO);
const CP_MINLIMIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MINLIMIT);
const CP_MINUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MINUS);
const CP_MINUSPLUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MINUSPLUS);
const CP_MOD1KEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MOD1KEY);
const CP_MOD2KEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MOD2KEY);
const CP_MOON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MOON);
const CP_MU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_MU);
const CP_NAND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NAND);
const CP_NATURAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NATURAL);
const CP_NEGATIVEMEDIUMSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEGATIVEMEDIUMSPACE);
const CP_NEGATIVETHICKSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEGATIVETHICKSPACE);
const CP_NEGATIVETHINSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEGATIVETHINSPACE);
const CP_NEGATIVEVERYTHINSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEGATIVEVERYTHINSPACE);
const CP_NEPTUNE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEPTUNE);
const CP_NESTEDGREATERGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NESTEDGREATERGREATER);
const CP_NESTEDLESSLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NESTEDLESSLESS);
const CP_NEUTRALSMILEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEUTRALSMILEY);
const CP_NEWLINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NEWLINE);
const CP_NHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NHACEK);
const CP_NOBREAK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOBREAK);
const CP_NONBREAKINGSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NONBREAKINGSPACE);
const CP_NOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOR);
const CP_NOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOT);
const CP_NOTCONGRUENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTCONGRUENT);
const CP_NOTCUPCAP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTCUPCAP);
const CP_NOTDOUBLEVERTICALBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTDOUBLEVERTICALBAR);
const CP_NOTELEMENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTELEMENT);
const CP_NOTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTEQUAL);
const CP_NOTEQUALTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTEQUALTILDE);
const CP_NOTEXISTS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTEXISTS);
const CP_NOTGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATER);
const CP_NOTGREATEREQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATEREQUAL);
const CP_NOTGREATERFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATERFULLEQUAL);
const CP_NOTGREATERGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATERGREATER);
const CP_NOTGREATERLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATERLESS);
const CP_NOTGREATERSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATERSLANTEQUAL);
const CP_NOTGREATERTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTGREATERTILDE);
const CP_NOTHUMPDOWNHUMP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTHUMPDOWNHUMP);
const CP_NOTHUMPEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTHUMPEQUAL);
const CP_NOTLEFTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLEFTTRIANGLE);
const CP_NOTLEFTTRIANGLEBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLEFTTRIANGLEBAR);
const CP_NOTLEFTTRIANGLEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLEFTTRIANGLEEQUAL);
const CP_NOTLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESS);
const CP_NOTLESSEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSEQUAL);
const CP_NOTLESSFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSFULLEQUAL);
const CP_NOTLESSGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSGREATER);
const CP_NOTLESSLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSLESS);
const CP_NOTLESSSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSSLANTEQUAL);
const CP_NOTLESSTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTLESSTILDE);
const CP_NOTNESTEDGREATERGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTNESTEDGREATERGREATER);
const CP_NOTNESTEDLESSLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTNESTEDLESSLESS);
const CP_NOTPRECEDES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTPRECEDES);
const CP_NOTPRECEDESEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTPRECEDESEQUAL);
const CP_NOTPRECEDESSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTPRECEDESSLANTEQUAL);
const CP_NOTPRECEDESTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTPRECEDESTILDE);
const CP_NOTREVERSEELEMENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTREVERSEELEMENT);
const CP_NOTRIGHTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTRIGHTTRIANGLE);
const CP_NOTRIGHTTRIANGLEBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTRIGHTTRIANGLEBAR);
const CP_NOTRIGHTTRIANGLEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTRIGHTTRIANGLEEQUAL);
const CP_NOTSQUARESUBSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSQUARESUBSET);
const CP_NOTSQUARESUBSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSQUARESUBSETEQUAL);
const CP_NOTSQUARESUPERSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSQUARESUPERSET);
const CP_NOTSQUARESUPERSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSQUARESUPERSETEQUAL);
const CP_NOTSUBSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUBSET);
const CP_NOTSUBSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUBSETEQUAL);
const CP_NOTSUCCEEDS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUCCEEDS);
const CP_NOTSUCCEEDSEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUCCEEDSEQUAL);
const CP_NOTSUCCEEDSSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUCCEEDSSLANTEQUAL);
const CP_NOTSUCCEEDSTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUCCEEDSTILDE);
const CP_NOTSUPERSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUPERSET);
const CP_NOTSUPERSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTSUPERSETEQUAL);
const CP_NOTTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTTILDE);
const CP_NOTTILDEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTTILDEEQUAL);
const CP_NOTTILDEFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTTILDEFULLEQUAL);
const CP_NOTTILDETILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTTILDETILDE);
const CP_NOTVERTICALBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NOTVERTICALBAR);
const CP_NTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NTILDE);
const CP_NU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NU);
const CP_NULL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NULL);
const CP_NUMBERCOMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NUMBERCOMMA);
const CP_NUMBERSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_NUMBERSIGN);
const CP_OACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OACUTE);
const CP_ODOUBLEACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ODOUBLEACUTE);
const CP_ODOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ODOUBLEDOT);
const CP_OE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OE);
const CP_OGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OGRAVE);
const CP_OHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OHAT);
const CP_OMEGA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OMEGA);
const CP_OMICRON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OMICRON);
const CP_OPENCURLYDOUBLEQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OPENCURLYDOUBLEQUOTE);
const CP_OPENCURLYQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OPENCURLYQUOTE);
const CP_OPTIONKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OPTIONKEY);
const CP_OR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OR);
const CP_OSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OSLASH);
const CP_OTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OTILDE);
const CP_OVERBRACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OVERBRACE);
const CP_OVERBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OVERBRACKET);
const CP_OVERPARENTHESIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_OVERPARENTHESIS);
const CP_PAGEBREAKABOVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PAGEBREAKABOVE);
const CP_PAGEBREAKBELOW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PAGEBREAKBELOW);
const CP_PARAGRAPH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PARAGRAPH);
const CP_PARAGRAPHSEPARATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PARAGRAPHSEPARATOR);
const CP_PARTIALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PARTIALD);
const CP_PERMUTATIONPRODUCT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PERMUTATIONPRODUCT);
const CP_PERPENDICULAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PERPENDICULAR);
const CP_PHI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PHI);
const CP_PI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PI);
const CP_PIECEWISE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PIECEWISE);
const CP_PISCESSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PISCESSIGN);
const CP_PLACEHOLDER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PLACEHOLDER);
const CP_PLUSMINUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PLUSMINUS);
const CP_PLUTO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PLUTO);
const CP_PRECEDES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRECEDES);
const CP_PRECEDESEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRECEDESEQUAL);
const CP_PRECEDESSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRECEDESSLANTEQUAL);
const CP_PRECEDESTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRECEDESTILDE);
const CP_PRIME: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRIME);
const CP_PROBABILITYPR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PROBABILITYPR);
const CP_PRODUCT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PRODUCT);
const CP_PROPORTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PROPORTION);
const CP_PROPORTIONAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PROPORTIONAL);
const CP_PSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_PSI);
const CP_QUARTERNOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_QUARTERNOTE);
const CP_RAWAMPERSAND: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWAMPERSAND);
const CP_RAWAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWAT);
const CP_RAWBACKQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWBACKQUOTE);
const CP_RAWBACKSLASH: CodePoint = CODEPOINT_LONGNAME_RAWBACKSLASH;
const CP_RAWCOLON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWCOLON);
const CP_RAWCOMMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWCOMMA);
const CP_RAWDASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWDASH);
const CP_RAWDOLLAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWDOLLAR);
const CP_RAWDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWDOT);
const CP_RAWDOUBLEQUOTE: CodePoint = CODEPOINT_LONGNAME_RAWDOUBLEQUOTE;
const CP_RAWEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWEQUAL);
const CP_RAWESCAPE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWESCAPE);
const CP_RAWEXCLAMATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWEXCLAMATION);
const CP_RAWGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWGREATER);
const CP_RAWLEFTBRACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWLEFTBRACE);
const CP_RAWLEFTBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWLEFTBRACKET);
const CP_RAWLEFTPARENTHESIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWLEFTPARENTHESIS);
const CP_RAWLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWLESS);
const CP_RAWNUMBERSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWNUMBERSIGN);
const CP_RAWPERCENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWPERCENT);
const CP_RAWPLUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWPLUS);
const CP_RAWQUESTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWQUESTION);
const CP_RAWQUOTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWQUOTE);
const CP_RAWRETURN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWRETURN);
const CP_RAWRIGHTBRACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWRIGHTBRACE);
const CP_RAWRIGHTBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWRIGHTBRACKET);
const CP_RAWRIGHTPARENTHESIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWRIGHTPARENTHESIS);
const CP_RAWSEMICOLON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWSEMICOLON);
const CP_RAWSLASH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWSLASH);
const CP_RAWSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWSPACE);
const CP_RAWSTAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWSTAR);
const CP_RAWTAB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWTAB);
const CP_RAWTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWTILDE);
const CP_RAWUNDERSCORE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWUNDERSCORE);
const CP_RAWVERTICALBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWVERTICALBAR);
const CP_RAWWEDGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RAWWEDGE);
const CP_REGISTEREDTRADEMARK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REGISTEREDTRADEMARK);
const CP_RETURNINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RETURNINDICATOR);
const CP_RETURNKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RETURNKEY);
const CP_REVERSEDOUBLEPRIME: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REVERSEDOUBLEPRIME);
const CP_REVERSEELEMENT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REVERSEELEMENT);
const CP_REVERSEEQUILIBRIUM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REVERSEEQUILIBRIUM);
const CP_REVERSEPRIME: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REVERSEPRIME);
const CP_REVERSEUPEQUILIBRIUM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_REVERSEUPEQUILIBRIUM);
const CP_RHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RHACEK);
const CP_RHO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RHO);
const CP_RIGHTANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTANGLE);
const CP_RIGHTANGLEBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTANGLEBRACKET);
const CP_RIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTARROW);
const CP_RIGHTARROWBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTARROWBAR);
const CP_RIGHTARROWLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTARROWLEFTARROW);
const CP_RIGHTASSOCIATION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTASSOCIATION);
const CP_RIGHTBRACKETINGBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTBRACKETINGBAR);
const CP_RIGHTCEILING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTCEILING);
const CP_RIGHTDOUBLEBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTDOUBLEBRACKET);
const CP_RIGHTDOUBLEBRACKETINGBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTDOUBLEBRACKETINGBAR);
const CP_RIGHTDOWNTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTDOWNTEEVECTOR);
const CP_RIGHTDOWNVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTDOWNVECTOR);
const CP_RIGHTDOWNVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTDOWNVECTORBAR);
const CP_RIGHTFLOOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTFLOOR);
const CP_RIGHTGUILLEMET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTGUILLEMET);
const CP_RIGHTMODIFIED: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTMODIFIED);
const CP_RIGHTPOINTER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTPOINTER);
const CP_RIGHTSKELETON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTSKELETON);
const CP_RIGHTTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTEE);
const CP_RIGHTTEEARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTEEARROW);
const CP_RIGHTTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTEEVECTOR);
const CP_RIGHTTRIANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTRIANGLE);
const CP_RIGHTTRIANGLEBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTRIANGLEBAR);
const CP_RIGHTTRIANGLEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTTRIANGLEEQUAL);
const CP_RIGHTUPDOWNVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTUPDOWNVECTOR);
const CP_RIGHTUPTEEVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTUPTEEVECTOR);
const CP_RIGHTUPVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTUPVECTOR);
const CP_RIGHTUPVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTUPVECTORBAR);
const CP_RIGHTVECTOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTVECTOR);
const CP_RIGHTVECTORBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RIGHTVECTORBAR);
const CP_ROUNDIMPLIES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ROUNDIMPLIES);
const CP_ROUNDSPACEINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ROUNDSPACEINDICATOR);
const CP_RULE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RULE);
const CP_RULEDELAYED: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RULEDELAYED);
const CP_RUPEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_RUPEE);
const CP_SADSMILEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SADSMILEY);
const CP_SAGITTARIUSSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SAGITTARIUSSIGN);
const CP_SAMPI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SAMPI);
const CP_SATURN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SATURN);
const CP_SCORPIOSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCORPIOSIGN);
const CP_SCRIPTA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTA);
const CP_SCRIPTB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTB);
const CP_SCRIPTC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTC);
const CP_SCRIPTCAPITALA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALA);
const CP_SCRIPTCAPITALB: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALB);
const CP_SCRIPTCAPITALC: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALC);
const CP_SCRIPTCAPITALD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALD);
const CP_SCRIPTCAPITALE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALE);
const CP_SCRIPTCAPITALF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALF);
const CP_SCRIPTCAPITALG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALG);
const CP_SCRIPTCAPITALH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALH);
const CP_SCRIPTCAPITALI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALI);
const CP_SCRIPTCAPITALJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALJ);
const CP_SCRIPTCAPITALK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALK);
const CP_SCRIPTCAPITALL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALL);
const CP_SCRIPTCAPITALM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALM);
const CP_SCRIPTCAPITALN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALN);
const CP_SCRIPTCAPITALO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALO);
const CP_SCRIPTCAPITALP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALP);
const CP_SCRIPTCAPITALQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALQ);
const CP_SCRIPTCAPITALR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALR);
const CP_SCRIPTCAPITALS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALS);
const CP_SCRIPTCAPITALT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALT);
const CP_SCRIPTCAPITALU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALU);
const CP_SCRIPTCAPITALV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALV);
const CP_SCRIPTCAPITALW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALW);
const CP_SCRIPTCAPITALX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALX);
const CP_SCRIPTCAPITALY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALY);
const CP_SCRIPTCAPITALZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTCAPITALZ);
const CP_SCRIPTD: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTD);
const CP_SCRIPTDOTLESSI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTDOTLESSI);
const CP_SCRIPTDOTLESSJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTDOTLESSJ);
const CP_SCRIPTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTE);
const CP_SCRIPTEIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTEIGHT);
const CP_SCRIPTF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTF);
const CP_SCRIPTFIVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTFIVE);
const CP_SCRIPTFOUR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTFOUR);
const CP_SCRIPTG: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTG);
const CP_SCRIPTH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTH);
const CP_SCRIPTI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTI);
const CP_SCRIPTJ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTJ);
const CP_SCRIPTK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTK);
const CP_SCRIPTL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTL);
const CP_SCRIPTM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTM);
const CP_SCRIPTN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTN);
const CP_SCRIPTNINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTNINE);
const CP_SCRIPTO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTO);
const CP_SCRIPTONE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTONE);
const CP_SCRIPTP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTP);
const CP_SCRIPTQ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTQ);
const CP_SCRIPTR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTR);
const CP_SCRIPTS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTS);
const CP_SCRIPTSEVEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTSEVEN);
const CP_SCRIPTSIX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTSIX);
const CP_SCRIPTT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTT);
const CP_SCRIPTTHREE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTTHREE);
const CP_SCRIPTTWO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTTWO);
const CP_SCRIPTU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTU);
const CP_SCRIPTV: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTV);
const CP_SCRIPTW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTW);
const CP_SCRIPTX: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTX);
const CP_SCRIPTY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTY);
const CP_SCRIPTZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTZ);
const CP_SCRIPTZERO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SCRIPTZERO);
const CP_SECTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SECTION);
const CP_SELECTIONPLACEHOLDER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SELECTIONPLACEHOLDER);
const CP_SHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHACEK);
const CP_SHAH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHAH);
const CP_SHARP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHARP);
const CP_SHIFTKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHIFTKEY);
const CP_SHORTDOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHORTDOWNARROW);
const CP_SHORTLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHORTLEFTARROW);
const CP_SHORTRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHORTRIGHTARROW);
const CP_SHORTUPARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SHORTUPARROW);
const CP_SIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SIGMA);
const CP_SIXPOINTEDSTAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SIXPOINTEDSTAR);
const CP_SKELETONINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SKELETONINDICATOR);
const CP_SMALLCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SMALLCIRCLE);
const CP_SPACEINDICATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPACEINDICATOR);
const CP_SPACEKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPACEKEY);
const CP_SPADESUIT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPADESUIT);
const CP_SPANFROMABOVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPANFROMABOVE);
const CP_SPANFROMBOTH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPANFROMBOTH);
const CP_SPANFROMLEFT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPANFROMLEFT);
const CP_SPHERICALANGLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPHERICALANGLE);
const CP_SPOOKY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SPOOKY);
const CP_SQRT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQRT);
const CP_SQUARE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUARE);
const CP_SQUAREINTERSECTION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUAREINTERSECTION);
const CP_SQUARESUBSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUARESUBSET);
const CP_SQUARESUBSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUARESUBSETEQUAL);
const CP_SQUARESUPERSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUARESUPERSET);
const CP_SQUARESUPERSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUARESUPERSETEQUAL);
const CP_SQUAREUNION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SQUAREUNION);
const CP_STAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STAR);
const CP_STEPPERDOWN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STEPPERDOWN);
const CP_STEPPERLEFT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STEPPERLEFT);
const CP_STEPPERRIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STEPPERRIGHT);
const CP_STEPPERUP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STEPPERUP);
const CP_STERLING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STERLING);
const CP_STIGMA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_STIGMA);
const CP_SUBSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUBSET);
const CP_SUBSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUBSETEQUAL);
const CP_SUCCEEDS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUCCEEDS);
const CP_SUCCEEDSEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUCCEEDSEQUAL);
const CP_SUCCEEDSSLANTEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUCCEEDSSLANTEQUAL);
const CP_SUCCEEDSTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUCCEEDSTILDE);
const CP_SUCHTHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUCHTHAT);
const CP_SUM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUM);
const CP_SUN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUN);
const CP_SUPERSET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUPERSET);
const CP_SUPERSETEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SUPERSETEQUAL);
const CP_SYSTEMENTERKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SYSTEMENTERKEY);
const CP_SYSTEMSMODELDELAY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SYSTEMSMODELDELAY);
const CP_SZ: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_SZ);
const CP_TABKEY: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TABKEY);
const CP_TAU: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TAU);
const CP_TAURUSSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TAURUSSIGN);
const CP_TENSORPRODUCT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TENSORPRODUCT);
const CP_TENSORWEDGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TENSORWEDGE);
const CP_THACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THACEK);
const CP_THEREFORE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THEREFORE);
const CP_THETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THETA);
const CP_THICKSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THICKSPACE);
const CP_THINSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THINSPACE);
const CP_THORN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_THORN);
const CP_TILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TILDE);
const CP_TILDEEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TILDEEQUAL);
const CP_TILDEFULLEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TILDEFULLEQUAL);
const CP_TILDETILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TILDETILDE);
const CP_TIMES: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TIMES);
const CP_TRADEMARK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TRADEMARK);
const CP_TRANSPOSE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TRANSPOSE);
const CP_TRIPLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TRIPLEDOT);
const CP_TWOWAYRULE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_TWOWAYRULE);
const CP_UACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UACUTE);
const CP_UDOUBLEACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UDOUBLEACUTE);
const CP_UDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UDOUBLEDOT);
const CP_UGRAVE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UGRAVE);
const CP_UHAT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UHAT);
const CP_UNDERBRACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNDERBRACE);
const CP_UNDERBRACKET: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNDERBRACKET);
const CP_UNDERPARENTHESIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNDERPARENTHESIS);
const CP_UNDIRECTEDEDGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNDIRECTEDEDGE);
const CP_UNION: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNION);
const CP_UNIONPLUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNIONPLUS);
const CP_UNKNOWNGLYPH: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UNKNOWNGLYPH);
const CP_UPARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPARROW);
const CP_UPARROWBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPARROWBAR);
const CP_UPARROWDOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPARROWDOWNARROW);
const CP_UPDOWNARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPDOWNARROW);
const CP_UPEQUILIBRIUM: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPEQUILIBRIUM);
const CP_UPPERLEFTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPPERLEFTARROW);
const CP_UPPERRIGHTARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPPERRIGHTARROW);
const CP_UPPOINTER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPPOINTER);
const CP_UPSILON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPSILON);
const CP_UPTEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPTEE);
const CP_UPTEEARROW: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_UPTEEARROW);
const CP_URANUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_URANUS);
const CP_URING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_URING);
const CP_VECTORGREATER: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VECTORGREATER);
const CP_VECTORGREATEREQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VECTORGREATEREQUAL);
const CP_VECTORLESS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VECTORLESS);
const CP_VECTORLESSEQUAL: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VECTORLESSEQUAL);
const CP_VEE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VEE);
const CP_VENUS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VENUS);
const CP_VERTICALBAR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERTICALBAR);
const CP_VERTICALELLIPSIS: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERTICALELLIPSIS);
const CP_VERTICALLINE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERTICALLINE);
const CP_VERTICALSEPARATOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERTICALSEPARATOR);
const CP_VERTICALTILDE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERTICALTILDE);
const CP_VERYTHINSPACE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VERYTHINSPACE);
const CP_VILLA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VILLA);
const CP_VIRGOSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_VIRGOSIGN);
const CP_WARNINGSIGN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WARNINGSIGN);
const CP_WATCHICON: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WATCHICON);
const CP_WEDGE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WEDGE);
const CP_WEIERSTRASSP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WEIERSTRASSP);
const CP_WHITEBISHOP: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEBISHOP);
const CP_WHITEKING: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEKING);
const CP_WHITEKNIGHT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEKNIGHT);
const CP_WHITEPAWN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEPAWN);
const CP_WHITEQUEEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEQUEEN);
const CP_WHITEROOK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WHITEROOK);
const CP_WOLF: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WOLF);
const CP_WOLFRAMALPHAPROMPT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WOLFRAMALPHAPROMPT);
const CP_WOLFRAMLANGUAGELOGO: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WOLFRAMLANGUAGELOGO);
const CP_WOLFRAMLANGUAGELOGOCIRCLE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_WOLFRAMLANGUAGELOGOCIRCLE);
const CP_XI: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_XI);
const CP_XNOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_XNOR);
const CP_XOR: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_XOR);
const CP_YACUTE: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_YACUTE);
const CP_YDOUBLEDOT: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_YDOUBLEDOT);
const CP_YEN: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_YEN);
const CP_ZETA: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ZETA);
const CP_ZHACEK: CodePoint = CodePoint::Char(CODEPOINT_LONGNAME_ZHACEK);







/// PHF map for fast longname to codepoint lookup  
pub static LONGNAME_TO_CODEPOINT_MAP: phf::Map<&'static str, CodePoint> = phf_map! {
	"AAcute" => CP_AACUTE,
	"ABar" => CP_ABAR,
	"ACup" => CP_ACUP,
	"ADoubleDot" => CP_ADOUBLEDOT,
	"AE" => CP_AE,
	"AGrave" => CP_AGRAVE,
	"AHat" => CP_AHAT,
	"ARing" => CP_ARING,
	"ATilde" => CP_ATILDE,
	"Akuz" => CP_AKUZ,
	"Aleph" => CP_ALEPH,
	"AliasDelimiter" => CP_ALIASDELIMITER,
	"AliasIndicator" => CP_ALIASINDICATOR,
	"AlignmentMarker" => CP_ALIGNMENTMARKER,
	"Alpha" => CP_ALPHA,
	"AltKey" => CP_ALTKEY,
	"And" => CP_AND,
	"Andy" => CP_ANDY,
	"Angle" => CP_ANGLE,
	"Angstrom" => CP_ANGSTROM,
	"Application" => CP_APPLICATION,
	"AquariusSign" => CP_AQUARIUSSIGN,
	"AriesSign" => CP_ARIESSIGN,
	"AscendingEllipsis" => CP_ASCENDINGELLIPSIS,
	"AutoLeftMatch" => CP_AUTOLEFTMATCH,
	"AutoOperand" => CP_AUTOOPERAND,
	"AutoPlaceholder" => CP_AUTOPLACEHOLDER,
	"AutoRightMatch" => CP_AUTORIGHTMATCH,
	"AutoSpace" => CP_AUTOSPACE,
	"Backslash" => CP_BACKSLASH,
	"BeamedEighthNote" => CP_BEAMEDEIGHTHNOTE,
	"BeamedSixteenthNote" => CP_BEAMEDSIXTEENTHNOTE,
	"Because" => CP_BECAUSE,
	"Bet" => CP_BET,
	"Beta" => CP_BETA,
	"BlackBishop" => CP_BLACKBISHOP,
	"BlackKing" => CP_BLACKKING,
	"BlackKnight" => CP_BLACKKNIGHT,
	"BlackPawn" => CP_BLACKPAWN,
	"BlackQueen" => CP_BLACKQUEEN,
	"BlackRook" => CP_BLACKROOK,
	"Breve" => CP_BREVE,
	"Bullet" => CP_BULLET,
	"CAcute" => CP_CACUTE,
	"CCedilla" => CP_CCEDILLA,
	"CHacek" => CP_CHACEK,
	"COMPATIBILITYKanjiSpace" => CP_COMPATIBILITYKANJISPACE,
	"COMPATIBILITYNoBreak" => CP_COMPATIBILITYNOBREAK,
	"CancerSign" => CP_CANCERSIGN,
	"Cap" => CP_CAP,
	"CapitalAAcute" => CP_CAPITALAACUTE,
	"CapitalABar" => CP_CAPITALABAR,
	"CapitalACup" => CP_CAPITALACUP,
	"CapitalADoubleDot" => CP_CAPITALADOUBLEDOT,
	"CapitalAE" => CP_CAPITALAE,
	"CapitalAGrave" => CP_CAPITALAGRAVE,
	"CapitalAHat" => CP_CAPITALAHAT,
	"CapitalARing" => CP_CAPITALARING,
	"CapitalATilde" => CP_CAPITALATILDE,
	"CapitalAlpha" => CP_CAPITALALPHA,
	"CapitalBeta" => CP_CAPITALBETA,
	"CapitalCAcute" => CP_CAPITALCACUTE,
	"CapitalCCedilla" => CP_CAPITALCCEDILLA,
	"CapitalCHacek" => CP_CAPITALCHACEK,
	"CapitalChi" => CP_CAPITALCHI,
	"CapitalDHacek" => CP_CAPITALDHACEK,
	"CapitalDelta" => CP_CAPITALDELTA,
	"CapitalDifferentialD" => CP_CAPITALDIFFERENTIALD,
	"CapitalDigamma" => CP_CAPITALDIGAMMA,
	"CapitalEAcute" => CP_CAPITALEACUTE,
	"CapitalEBar" => CP_CAPITALEBAR,
	"CapitalECup" => CP_CAPITALECUP,
	"CapitalEDoubleDot" => CP_CAPITALEDOUBLEDOT,
	"CapitalEGrave" => CP_CAPITALEGRAVE,
	"CapitalEHacek" => CP_CAPITALEHACEK,
	"CapitalEHat" => CP_CAPITALEHAT,
	"CapitalEpsilon" => CP_CAPITALEPSILON,
	"CapitalEta" => CP_CAPITALETA,
	"CapitalEth" => CP_CAPITALETH,
	"CapitalGamma" => CP_CAPITALGAMMA,
	"CapitalIAcute" => CP_CAPITALIACUTE,
	"CapitalICup" => CP_CAPITALICUP,
	"CapitalIDoubleDot" => CP_CAPITALIDOUBLEDOT,
	"CapitalIGrave" => CP_CAPITALIGRAVE,
	"CapitalIHat" => CP_CAPITALIHAT,
	"CapitalIota" => CP_CAPITALIOTA,
	"CapitalKappa" => CP_CAPITALKAPPA,
	"CapitalKoppa" => CP_CAPITALKOPPA,
	"CapitalLSlash" => CP_CAPITALLSLASH,
	"CapitalLambda" => CP_CAPITALLAMBDA,
	"CapitalMu" => CP_CAPITALMU,
	"CapitalNHacek" => CP_CAPITALNHACEK,
	"CapitalNTilde" => CP_CAPITALNTILDE,
	"CapitalNu" => CP_CAPITALNU,
	"CapitalOAcute" => CP_CAPITALOACUTE,
	"CapitalODoubleAcute" => CP_CAPITALODOUBLEACUTE,
	"CapitalODoubleDot" => CP_CAPITALODOUBLEDOT,
	"CapitalOE" => CP_CAPITALOE,
	"CapitalOGrave" => CP_CAPITALOGRAVE,
	"CapitalOHat" => CP_CAPITALOHAT,
	"CapitalOSlash" => CP_CAPITALOSLASH,
	"CapitalOTilde" => CP_CAPITALOTILDE,
	"CapitalOmega" => CP_CAPITALOMEGA,
	"CapitalOmicron" => CP_CAPITALOMICRON,
	"CapitalPhi" => CP_CAPITALPHI,
	"CapitalPi" => CP_CAPITALPI,
	"CapitalPsi" => CP_CAPITALPSI,
	"CapitalRHacek" => CP_CAPITALRHACEK,
	"CapitalRho" => CP_CAPITALRHO,
	"CapitalSHacek" => CP_CAPITALSHACEK,
	"CapitalSampi" => CP_CAPITALSAMPI,
	"CapitalSigma" => CP_CAPITALSIGMA,
	"CapitalStigma" => CP_CAPITALSTIGMA,
	"CapitalTHacek" => CP_CAPITALTHACEK,
	"CapitalTau" => CP_CAPITALTAU,
	"CapitalTheta" => CP_CAPITALTHETA,
	"CapitalThorn" => CP_CAPITALTHORN,
	"CapitalUAcute" => CP_CAPITALUACUTE,
	"CapitalUDoubleAcute" => CP_CAPITALUDOUBLEACUTE,
	"CapitalUDoubleDot" => CP_CAPITALUDOUBLEDOT,
	"CapitalUGrave" => CP_CAPITALUGRAVE,
	"CapitalUHat" => CP_CAPITALUHAT,
	"CapitalURing" => CP_CAPITALURING,
	"CapitalUpsilon" => CP_CAPITALUPSILON,
	"CapitalXi" => CP_CAPITALXI,
	"CapitalYAcute" => CP_CAPITALYACUTE,
	"CapitalZHacek" => CP_CAPITALZHACEK,
	"CapitalZeta" => CP_CAPITALZETA,
	"CapricornSign" => CP_CAPRICORNSIGN,
	"Cedilla" => CP_CEDILLA,
	"Cent" => CP_CENT,
	"CenterDot" => CP_CENTERDOT,
	"CenterEllipsis" => CP_CENTERELLIPSIS,
	"CheckedBox" => CP_CHECKEDBOX,
	"Checkmark" => CP_CHECKMARK,
	"CheckmarkedBox" => CP_CHECKMARKEDBOX,
	"Chi" => CP_CHI,
	"CircleDot" => CP_CIRCLEDOT,
	"CircleMinus" => CP_CIRCLEMINUS,
	"CirclePlus" => CP_CIRCLEPLUS,
	"CircleTimes" => CP_CIRCLETIMES,
	"ClockwiseContourIntegral" => CP_CLOCKWISECONTOURINTEGRAL,
	"CloseCurlyDoubleQuote" => CP_CLOSECURLYDOUBLEQUOTE,
	"CloseCurlyQuote" => CP_CLOSECURLYQUOTE,
	"CloverLeaf" => CP_CLOVERLEAF,
	"ClubSuit" => CP_CLUBSUIT,
	"Colon" => CP_COLON,
	"CommandKey" => CP_COMMANDKEY,
	"Conditioned" => CP_CONDITIONED,
	"Congruent" => CP_CONGRUENT,
	"Conjugate" => CP_CONJUGATE,
	"ConjugateTranspose" => CP_CONJUGATETRANSPOSE,
	"ConstantC" => CP_CONSTANTC,
	"Continuation" => CP_CONTINUATION,
	"ContinuedFractionK" => CP_CONTINUEDFRACTIONK,
	"ContourIntegral" => CP_CONTOURINTEGRAL,
	"ControlKey" => CP_CONTROLKEY,
	"Coproduct" => CP_COPRODUCT,
	"Copyright" => CP_COPYRIGHT,
	"CounterClockwiseContourIntegral" => CP_COUNTERCLOCKWISECONTOURINTEGRAL,
	"Cross" => CP_CROSS,
	"CubeRoot" => CP_CUBEROOT,
	"Cup" => CP_CUP,
	"CupCap" => CP_CUPCAP,
	"CurlyCapitalUpsilon" => CP_CURLYCAPITALUPSILON,
	"CurlyEpsilon" => CP_CURLYEPSILON,
	"CurlyKappa" => CP_CURLYKAPPA,
	"CurlyPhi" => CP_CURLYPHI,
	"CurlyPi" => CP_CURLYPI,
	"CurlyRho" => CP_CURLYRHO,
	"CurlyTheta" => CP_CURLYTHETA,
	"Currency" => CP_CURRENCY,
	"DHacek" => CP_DHACEK,
	"Dagger" => CP_DAGGER,
	"Dalet" => CP_DALET,
	"Dash" => CP_DASH,
	"Degree" => CP_DEGREE,
	"Del" => CP_DEL,
	"DeleteKey" => CP_DELETEKEY,
	"Delta" => CP_DELTA,
	"DescendingEllipsis" => CP_DESCENDINGELLIPSIS,
	"Diameter" => CP_DIAMETER,
	"Diamond" => CP_DIAMOND,
	"DiamondSuit" => CP_DIAMONDSUIT,
	"DifferenceDelta" => CP_DIFFERENCEDELTA,
	"DifferentialD" => CP_DIFFERENTIALD,
	"Digamma" => CP_DIGAMMA,
	"DirectedEdge" => CP_DIRECTEDEDGE,
	"DiscreteRatio" => CP_DISCRETERATIO,
	"DiscreteShift" => CP_DISCRETESHIFT,
	"DiscretionaryHyphen" => CP_DISCRETIONARYHYPHEN,
	"DiscretionaryLineSeparator" => CP_DISCRETIONARYLINESEPARATOR,
	"DiscretionaryPageBreakAbove" => CP_DISCRETIONARYPAGEBREAKABOVE,
	"DiscretionaryPageBreakBelow" => CP_DISCRETIONARYPAGEBREAKBELOW,
	"DiscretionaryParagraphSeparator" => CP_DISCRETIONARYPARAGRAPHSEPARATOR,
	"Distributed" => CP_DISTRIBUTED,
	"Divide" => CP_DIVIDE,
	"Divides" => CP_DIVIDES,
	"DivisionSlash" => CP_DIVISIONSLASH,
	"DotEqual" => CP_DOTEQUAL,
	"DotlessI" => CP_DOTLESSI,
	"DotlessJ" => CP_DOTLESSJ,
	"DottedSquare" => CP_DOTTEDSQUARE,
	"DoubleContourIntegral" => CP_DOUBLECONTOURINTEGRAL,
	"DoubleDagger" => CP_DOUBLEDAGGER,
	"DoubleDot" => CP_DOUBLEDOT,
	"DoubleDownArrow" => CP_DOUBLEDOWNARROW,
	"DoubleLeftArrow" => CP_DOUBLELEFTARROW,
	"DoubleLeftRightArrow" => CP_DOUBLELEFTRIGHTARROW,
	"DoubleLeftTee" => CP_DOUBLELEFTTEE,
	"DoubleLongLeftArrow" => CP_DOUBLELONGLEFTARROW,
	"DoubleLongLeftRightArrow" => CP_DOUBLELONGLEFTRIGHTARROW,
	"DoubleLongRightArrow" => CP_DOUBLELONGRIGHTARROW,
	"DoublePrime" => CP_DOUBLEPRIME,
	"DoubleRightArrow" => CP_DOUBLERIGHTARROW,
	"DoubleRightTee" => CP_DOUBLERIGHTTEE,
	"DoubleStruckA" => CP_DOUBLESTRUCKA,
	"DoubleStruckB" => CP_DOUBLESTRUCKB,
	"DoubleStruckC" => CP_DOUBLESTRUCKC,
	"DoubleStruckCapitalA" => CP_DOUBLESTRUCKCAPITALA,
	"DoubleStruckCapitalB" => CP_DOUBLESTRUCKCAPITALB,
	"DoubleStruckCapitalC" => CP_DOUBLESTRUCKCAPITALC,
	"DoubleStruckCapitalD" => CP_DOUBLESTRUCKCAPITALD,
	"DoubleStruckCapitalE" => CP_DOUBLESTRUCKCAPITALE,
	"DoubleStruckCapitalF" => CP_DOUBLESTRUCKCAPITALF,
	"DoubleStruckCapitalG" => CP_DOUBLESTRUCKCAPITALG,
	"DoubleStruckCapitalH" => CP_DOUBLESTRUCKCAPITALH,
	"DoubleStruckCapitalI" => CP_DOUBLESTRUCKCAPITALI,
	"DoubleStruckCapitalJ" => CP_DOUBLESTRUCKCAPITALJ,
	"DoubleStruckCapitalK" => CP_DOUBLESTRUCKCAPITALK,
	"DoubleStruckCapitalL" => CP_DOUBLESTRUCKCAPITALL,
	"DoubleStruckCapitalM" => CP_DOUBLESTRUCKCAPITALM,
	"DoubleStruckCapitalN" => CP_DOUBLESTRUCKCAPITALN,
	"DoubleStruckCapitalO" => CP_DOUBLESTRUCKCAPITALO,
	"DoubleStruckCapitalP" => CP_DOUBLESTRUCKCAPITALP,
	"DoubleStruckCapitalQ" => CP_DOUBLESTRUCKCAPITALQ,
	"DoubleStruckCapitalR" => CP_DOUBLESTRUCKCAPITALR,
	"DoubleStruckCapitalS" => CP_DOUBLESTRUCKCAPITALS,
	"DoubleStruckCapitalT" => CP_DOUBLESTRUCKCAPITALT,
	"DoubleStruckCapitalU" => CP_DOUBLESTRUCKCAPITALU,
	"DoubleStruckCapitalV" => CP_DOUBLESTRUCKCAPITALV,
	"DoubleStruckCapitalW" => CP_DOUBLESTRUCKCAPITALW,
	"DoubleStruckCapitalX" => CP_DOUBLESTRUCKCAPITALX,
	"DoubleStruckCapitalY" => CP_DOUBLESTRUCKCAPITALY,
	"DoubleStruckCapitalZ" => CP_DOUBLESTRUCKCAPITALZ,
	"DoubleStruckD" => CP_DOUBLESTRUCKD,
	"DoubleStruckE" => CP_DOUBLESTRUCKE,
	"DoubleStruckEight" => CP_DOUBLESTRUCKEIGHT,
	"DoubleStruckF" => CP_DOUBLESTRUCKF,
	"DoubleStruckFive" => CP_DOUBLESTRUCKFIVE,
	"DoubleStruckFour" => CP_DOUBLESTRUCKFOUR,
	"DoubleStruckG" => CP_DOUBLESTRUCKG,
	"DoubleStruckH" => CP_DOUBLESTRUCKH,
	"DoubleStruckI" => CP_DOUBLESTRUCKI,
	"DoubleStruckJ" => CP_DOUBLESTRUCKJ,
	"DoubleStruckK" => CP_DOUBLESTRUCKK,
	"DoubleStruckL" => CP_DOUBLESTRUCKL,
	"DoubleStruckM" => CP_DOUBLESTRUCKM,
	"DoubleStruckN" => CP_DOUBLESTRUCKN,
	"DoubleStruckNine" => CP_DOUBLESTRUCKNINE,
	"DoubleStruckO" => CP_DOUBLESTRUCKO,
	"DoubleStruckOne" => CP_DOUBLESTRUCKONE,
	"DoubleStruckP" => CP_DOUBLESTRUCKP,
	"DoubleStruckQ" => CP_DOUBLESTRUCKQ,
	"DoubleStruckR" => CP_DOUBLESTRUCKR,
	"DoubleStruckS" => CP_DOUBLESTRUCKS,
	"DoubleStruckSeven" => CP_DOUBLESTRUCKSEVEN,
	"DoubleStruckSix" => CP_DOUBLESTRUCKSIX,
	"DoubleStruckT" => CP_DOUBLESTRUCKT,
	"DoubleStruckThree" => CP_DOUBLESTRUCKTHREE,
	"DoubleStruckTwo" => CP_DOUBLESTRUCKTWO,
	"DoubleStruckU" => CP_DOUBLESTRUCKU,
	"DoubleStruckV" => CP_DOUBLESTRUCKV,
	"DoubleStruckW" => CP_DOUBLESTRUCKW,
	"DoubleStruckX" => CP_DOUBLESTRUCKX,
	"DoubleStruckY" => CP_DOUBLESTRUCKY,
	"DoubleStruckZ" => CP_DOUBLESTRUCKZ,
	"DoubleStruckZero" => CP_DOUBLESTRUCKZERO,
	"DoubleUpArrow" => CP_DOUBLEUPARROW,
	"DoubleUpDownArrow" => CP_DOUBLEUPDOWNARROW,
	"DoubleVerticalBar" => CP_DOUBLEVERTICALBAR,
	"DoubledGamma" => CP_DOUBLEDGAMMA,
	"DoubledPi" => CP_DOUBLEDPI,
	"DownArrow" => CP_DOWNARROW,
	"DownArrowBar" => CP_DOWNARROWBAR,
	"DownArrowUpArrow" => CP_DOWNARROWUPARROW,
	"DownBreve" => CP_DOWNBREVE,
	"DownExclamation" => CP_DOWNEXCLAMATION,
	"DownLeftRightVector" => CP_DOWNLEFTRIGHTVECTOR,
	"DownLeftTeeVector" => CP_DOWNLEFTTEEVECTOR,
	"DownLeftVector" => CP_DOWNLEFTVECTOR,
	"DownLeftVectorBar" => CP_DOWNLEFTVECTORBAR,
	"DownPointer" => CP_DOWNPOINTER,
	"DownQuestion" => CP_DOWNQUESTION,
	"DownRightTeeVector" => CP_DOWNRIGHTTEEVECTOR,
	"DownRightVector" => CP_DOWNRIGHTVECTOR,
	"DownRightVectorBar" => CP_DOWNRIGHTVECTORBAR,
	"DownTee" => CP_DOWNTEE,
	"DownTeeArrow" => CP_DOWNTEEARROW,
	"EAcute" => CP_EACUTE,
	"EBar" => CP_EBAR,
	"ECup" => CP_ECUP,
	"EDoubleDot" => CP_EDOUBLEDOT,
	"EGrave" => CP_EGRAVE,
	"EHacek" => CP_EHACEK,
	"EHat" => CP_EHAT,
	"Earth" => CP_EARTH,
	"EighthNote" => CP_EIGHTHNOTE,
	"Element" => CP_ELEMENT,
	"Ellipsis" => CP_ELLIPSIS,
	"EmptyCircle" => CP_EMPTYCIRCLE,
	"EmptyDiamond" => CP_EMPTYDIAMOND,
	"EmptyDownTriangle" => CP_EMPTYDOWNTRIANGLE,
	"EmptyRectangle" => CP_EMPTYRECTANGLE,
	"EmptySet" => CP_EMPTYSET,
	"EmptySmallCircle" => CP_EMPTYSMALLCIRCLE,
	"EmptySmallSquare" => CP_EMPTYSMALLSQUARE,
	"EmptySquare" => CP_EMPTYSQUARE,
	"EmptyUpTriangle" => CP_EMPTYUPTRIANGLE,
	"EmptyVerySmallSquare" => CP_EMPTYVERYSMALLSQUARE,
	"EnterKey" => CP_ENTERKEY,
	"EntityEnd" => CP_ENTITYEND,
	"EntityStart" => CP_ENTITYSTART,
	"Epsilon" => CP_EPSILON,
	"Equal" => CP_EQUAL,
	"EqualTilde" => CP_EQUALTILDE,
	"Equilibrium" => CP_EQUILIBRIUM,
	"Equivalent" => CP_EQUIVALENT,
	"ErrorIndicator" => CP_ERRORINDICATOR,
	"EscapeKey" => CP_ESCAPEKEY,
	"Eta" => CP_ETA,
	"Eth" => CP_ETH,
	"Euro" => CP_EURO,
	"Exists" => CP_EXISTS,
	"ExpectationE" => CP_EXPECTATIONE,
	"ExponentialE" => CP_EXPONENTIALE,
	"FiLigature" => CP_FILIGATURE,
	"FilledCircle" => CP_FILLEDCIRCLE,
	"FilledDiamond" => CP_FILLEDDIAMOND,
	"FilledDownTriangle" => CP_FILLEDDOWNTRIANGLE,
	"FilledLeftTriangle" => CP_FILLEDLEFTTRIANGLE,
	"FilledRectangle" => CP_FILLEDRECTANGLE,
	"FilledRightTriangle" => CP_FILLEDRIGHTTRIANGLE,
	"FilledSmallCircle" => CP_FILLEDSMALLCIRCLE,
	"FilledSmallSquare" => CP_FILLEDSMALLSQUARE,
	"FilledSquare" => CP_FILLEDSQUARE,
	"FilledUpTriangle" => CP_FILLEDUPTRIANGLE,
	"FilledVerySmallSquare" => CP_FILLEDVERYSMALLSQUARE,
	"FinalSigma" => CP_FINALSIGMA,
	"FirstPage" => CP_FIRSTPAGE,
	"FivePointedStar" => CP_FIVEPOINTEDSTAR,
	"FlLigature" => CP_FLLIGATURE,
	"Flat" => CP_FLAT,
	"Florin" => CP_FLORIN,
	"ForAll" => CP_FORALL,
	"FormalA" => CP_FORMALA,
	"FormalAlpha" => CP_FORMALALPHA,
	"FormalB" => CP_FORMALB,
	"FormalBeta" => CP_FORMALBETA,
	"FormalC" => CP_FORMALC,
	"FormalCapitalA" => CP_FORMALCAPITALA,
	"FormalCapitalAlpha" => CP_FORMALCAPITALALPHA,
	"FormalCapitalB" => CP_FORMALCAPITALB,
	"FormalCapitalBeta" => CP_FORMALCAPITALBETA,
	"FormalCapitalC" => CP_FORMALCAPITALC,
	"FormalCapitalChi" => CP_FORMALCAPITALCHI,
	"FormalCapitalD" => CP_FORMALCAPITALD,
	"FormalCapitalDelta" => CP_FORMALCAPITALDELTA,
	"FormalCapitalDigamma" => CP_FORMALCAPITALDIGAMMA,
	"FormalCapitalE" => CP_FORMALCAPITALE,
	"FormalCapitalEpsilon" => CP_FORMALCAPITALEPSILON,
	"FormalCapitalEta" => CP_FORMALCAPITALETA,
	"FormalCapitalF" => CP_FORMALCAPITALF,
	"FormalCapitalG" => CP_FORMALCAPITALG,
	"FormalCapitalGamma" => CP_FORMALCAPITALGAMMA,
	"FormalCapitalH" => CP_FORMALCAPITALH,
	"FormalCapitalI" => CP_FORMALCAPITALI,
	"FormalCapitalIota" => CP_FORMALCAPITALIOTA,
	"FormalCapitalJ" => CP_FORMALCAPITALJ,
	"FormalCapitalK" => CP_FORMALCAPITALK,
	"FormalCapitalKappa" => CP_FORMALCAPITALKAPPA,
	"FormalCapitalKoppa" => CP_FORMALCAPITALKOPPA,
	"FormalCapitalL" => CP_FORMALCAPITALL,
	"FormalCapitalLambda" => CP_FORMALCAPITALLAMBDA,
	"FormalCapitalM" => CP_FORMALCAPITALM,
	"FormalCapitalMu" => CP_FORMALCAPITALMU,
	"FormalCapitalN" => CP_FORMALCAPITALN,
	"FormalCapitalNu" => CP_FORMALCAPITALNU,
	"FormalCapitalO" => CP_FORMALCAPITALO,
	"FormalCapitalOmega" => CP_FORMALCAPITALOMEGA,
	"FormalCapitalOmicron" => CP_FORMALCAPITALOMICRON,
	"FormalCapitalP" => CP_FORMALCAPITALP,
	"FormalCapitalPhi" => CP_FORMALCAPITALPHI,
	"FormalCapitalPi" => CP_FORMALCAPITALPI,
	"FormalCapitalPsi" => CP_FORMALCAPITALPSI,
	"FormalCapitalQ" => CP_FORMALCAPITALQ,
	"FormalCapitalR" => CP_FORMALCAPITALR,
	"FormalCapitalRho" => CP_FORMALCAPITALRHO,
	"FormalCapitalS" => CP_FORMALCAPITALS,
	"FormalCapitalSampi" => CP_FORMALCAPITALSAMPI,
	"FormalCapitalSigma" => CP_FORMALCAPITALSIGMA,
	"FormalCapitalStigma" => CP_FORMALCAPITALSTIGMA,
	"FormalCapitalT" => CP_FORMALCAPITALT,
	"FormalCapitalTau" => CP_FORMALCAPITALTAU,
	"FormalCapitalTheta" => CP_FORMALCAPITALTHETA,
	"FormalCapitalU" => CP_FORMALCAPITALU,
	"FormalCapitalUpsilon" => CP_FORMALCAPITALUPSILON,
	"FormalCapitalV" => CP_FORMALCAPITALV,
	"FormalCapitalW" => CP_FORMALCAPITALW,
	"FormalCapitalX" => CP_FORMALCAPITALX,
	"FormalCapitalXi" => CP_FORMALCAPITALXI,
	"FormalCapitalY" => CP_FORMALCAPITALY,
	"FormalCapitalZ" => CP_FORMALCAPITALZ,
	"FormalCapitalZeta" => CP_FORMALCAPITALZETA,
	"FormalChi" => CP_FORMALCHI,
	"FormalCurlyCapitalUpsilon" => CP_FORMALCURLYCAPITALUPSILON,
	"FormalCurlyEpsilon" => CP_FORMALCURLYEPSILON,
	"FormalCurlyKappa" => CP_FORMALCURLYKAPPA,
	"FormalCurlyPhi" => CP_FORMALCURLYPHI,
	"FormalCurlyPi" => CP_FORMALCURLYPI,
	"FormalCurlyRho" => CP_FORMALCURLYRHO,
	"FormalCurlyTheta" => CP_FORMALCURLYTHETA,
	"FormalD" => CP_FORMALD,
	"FormalDelta" => CP_FORMALDELTA,
	"FormalDigamma" => CP_FORMALDIGAMMA,
	"FormalE" => CP_FORMALE,
	"FormalEpsilon" => CP_FORMALEPSILON,
	"FormalEta" => CP_FORMALETA,
	"FormalF" => CP_FORMALF,
	"FormalFinalSigma" => CP_FORMALFINALSIGMA,
	"FormalG" => CP_FORMALG,
	"FormalGamma" => CP_FORMALGAMMA,
	"FormalH" => CP_FORMALH,
	"FormalI" => CP_FORMALI,
	"FormalIota" => CP_FORMALIOTA,
	"FormalJ" => CP_FORMALJ,
	"FormalK" => CP_FORMALK,
	"FormalKappa" => CP_FORMALKAPPA,
	"FormalKoppa" => CP_FORMALKOPPA,
	"FormalL" => CP_FORMALL,
	"FormalLambda" => CP_FORMALLAMBDA,
	"FormalM" => CP_FORMALM,
	"FormalMu" => CP_FORMALMU,
	"FormalN" => CP_FORMALN,
	"FormalNu" => CP_FORMALNU,
	"FormalO" => CP_FORMALO,
	"FormalOmega" => CP_FORMALOMEGA,
	"FormalOmicron" => CP_FORMALOMICRON,
	"FormalP" => CP_FORMALP,
	"FormalPhi" => CP_FORMALPHI,
	"FormalPi" => CP_FORMALPI,
	"FormalPsi" => CP_FORMALPSI,
	"FormalQ" => CP_FORMALQ,
	"FormalR" => CP_FORMALR,
	"FormalRho" => CP_FORMALRHO,
	"FormalS" => CP_FORMALS,
	"FormalSampi" => CP_FORMALSAMPI,
	"FormalScriptA" => CP_FORMALSCRIPTA,
	"FormalScriptB" => CP_FORMALSCRIPTB,
	"FormalScriptC" => CP_FORMALSCRIPTC,
	"FormalScriptCapitalA" => CP_FORMALSCRIPTCAPITALA,
	"FormalScriptCapitalB" => CP_FORMALSCRIPTCAPITALB,
	"FormalScriptCapitalC" => CP_FORMALSCRIPTCAPITALC,
	"FormalScriptCapitalD" => CP_FORMALSCRIPTCAPITALD,
	"FormalScriptCapitalE" => CP_FORMALSCRIPTCAPITALE,
	"FormalScriptCapitalF" => CP_FORMALSCRIPTCAPITALF,
	"FormalScriptCapitalG" => CP_FORMALSCRIPTCAPITALG,
	"FormalScriptCapitalH" => CP_FORMALSCRIPTCAPITALH,
	"FormalScriptCapitalI" => CP_FORMALSCRIPTCAPITALI,
	"FormalScriptCapitalJ" => CP_FORMALSCRIPTCAPITALJ,
	"FormalScriptCapitalK" => CP_FORMALSCRIPTCAPITALK,
	"FormalScriptCapitalL" => CP_FORMALSCRIPTCAPITALL,
	"FormalScriptCapitalM" => CP_FORMALSCRIPTCAPITALM,
	"FormalScriptCapitalN" => CP_FORMALSCRIPTCAPITALN,
	"FormalScriptCapitalO" => CP_FORMALSCRIPTCAPITALO,
	"FormalScriptCapitalP" => CP_FORMALSCRIPTCAPITALP,
	"FormalScriptCapitalQ" => CP_FORMALSCRIPTCAPITALQ,
	"FormalScriptCapitalR" => CP_FORMALSCRIPTCAPITALR,
	"FormalScriptCapitalS" => CP_FORMALSCRIPTCAPITALS,
	"FormalScriptCapitalT" => CP_FORMALSCRIPTCAPITALT,
	"FormalScriptCapitalU" => CP_FORMALSCRIPTCAPITALU,
	"FormalScriptCapitalV" => CP_FORMALSCRIPTCAPITALV,
	"FormalScriptCapitalW" => CP_FORMALSCRIPTCAPITALW,
	"FormalScriptCapitalX" => CP_FORMALSCRIPTCAPITALX,
	"FormalScriptCapitalY" => CP_FORMALSCRIPTCAPITALY,
	"FormalScriptCapitalZ" => CP_FORMALSCRIPTCAPITALZ,
	"FormalScriptD" => CP_FORMALSCRIPTD,
	"FormalScriptE" => CP_FORMALSCRIPTE,
	"FormalScriptF" => CP_FORMALSCRIPTF,
	"FormalScriptG" => CP_FORMALSCRIPTG,
	"FormalScriptH" => CP_FORMALSCRIPTH,
	"FormalScriptI" => CP_FORMALSCRIPTI,
	"FormalScriptJ" => CP_FORMALSCRIPTJ,
	"FormalScriptK" => CP_FORMALSCRIPTK,
	"FormalScriptL" => CP_FORMALSCRIPTL,
	"FormalScriptM" => CP_FORMALSCRIPTM,
	"FormalScriptN" => CP_FORMALSCRIPTN,
	"FormalScriptO" => CP_FORMALSCRIPTO,
	"FormalScriptP" => CP_FORMALSCRIPTP,
	"FormalScriptQ" => CP_FORMALSCRIPTQ,
	"FormalScriptR" => CP_FORMALSCRIPTR,
	"FormalScriptS" => CP_FORMALSCRIPTS,
	"FormalScriptT" => CP_FORMALSCRIPTT,
	"FormalScriptU" => CP_FORMALSCRIPTU,
	"FormalScriptV" => CP_FORMALSCRIPTV,
	"FormalScriptW" => CP_FORMALSCRIPTW,
	"FormalScriptX" => CP_FORMALSCRIPTX,
	"FormalScriptY" => CP_FORMALSCRIPTY,
	"FormalScriptZ" => CP_FORMALSCRIPTZ,
	"FormalSigma" => CP_FORMALSIGMA,
	"FormalStigma" => CP_FORMALSTIGMA,
	"FormalT" => CP_FORMALT,
	"FormalTau" => CP_FORMALTAU,
	"FormalTheta" => CP_FORMALTHETA,
	"FormalU" => CP_FORMALU,
	"FormalUpsilon" => CP_FORMALUPSILON,
	"FormalV" => CP_FORMALV,
	"FormalW" => CP_FORMALW,
	"FormalX" => CP_FORMALX,
	"FormalXi" => CP_FORMALXI,
	"FormalY" => CP_FORMALY,
	"FormalZ" => CP_FORMALZ,
	"FormalZeta" => CP_FORMALZETA,
	"FreakedSmiley" => CP_FREAKEDSMILEY,
	"FreeformPrompt" => CP_FREEFORMPROMPT,
	"Function" => CP_FUNCTION,
	"Gamma" => CP_GAMMA,
	"GeminiSign" => CP_GEMINISIGN,
	"Gimel" => CP_GIMEL,
	"GothicA" => CP_GOTHICA,
	"GothicB" => CP_GOTHICB,
	"GothicC" => CP_GOTHICC,
	"GothicCapitalA" => CP_GOTHICCAPITALA,
	"GothicCapitalB" => CP_GOTHICCAPITALB,
	"GothicCapitalC" => CP_GOTHICCAPITALC,
	"GothicCapitalD" => CP_GOTHICCAPITALD,
	"GothicCapitalE" => CP_GOTHICCAPITALE,
	"GothicCapitalF" => CP_GOTHICCAPITALF,
	"GothicCapitalG" => CP_GOTHICCAPITALG,
	"GothicCapitalH" => CP_GOTHICCAPITALH,
	"GothicCapitalI" => CP_GOTHICCAPITALI,
	"GothicCapitalJ" => CP_GOTHICCAPITALJ,
	"GothicCapitalK" => CP_GOTHICCAPITALK,
	"GothicCapitalL" => CP_GOTHICCAPITALL,
	"GothicCapitalM" => CP_GOTHICCAPITALM,
	"GothicCapitalN" => CP_GOTHICCAPITALN,
	"GothicCapitalO" => CP_GOTHICCAPITALO,
	"GothicCapitalP" => CP_GOTHICCAPITALP,
	"GothicCapitalQ" => CP_GOTHICCAPITALQ,
	"GothicCapitalR" => CP_GOTHICCAPITALR,
	"GothicCapitalS" => CP_GOTHICCAPITALS,
	"GothicCapitalT" => CP_GOTHICCAPITALT,
	"GothicCapitalU" => CP_GOTHICCAPITALU,
	"GothicCapitalV" => CP_GOTHICCAPITALV,
	"GothicCapitalW" => CP_GOTHICCAPITALW,
	"GothicCapitalX" => CP_GOTHICCAPITALX,
	"GothicCapitalY" => CP_GOTHICCAPITALY,
	"GothicCapitalZ" => CP_GOTHICCAPITALZ,
	"GothicD" => CP_GOTHICD,
	"GothicE" => CP_GOTHICE,
	"GothicEight" => CP_GOTHICEIGHT,
	"GothicF" => CP_GOTHICF,
	"GothicFive" => CP_GOTHICFIVE,
	"GothicFour" => CP_GOTHICFOUR,
	"GothicG" => CP_GOTHICG,
	"GothicH" => CP_GOTHICH,
	"GothicI" => CP_GOTHICI,
	"GothicJ" => CP_GOTHICJ,
	"GothicK" => CP_GOTHICK,
	"GothicL" => CP_GOTHICL,
	"GothicM" => CP_GOTHICM,
	"GothicN" => CP_GOTHICN,
	"GothicNine" => CP_GOTHICNINE,
	"GothicO" => CP_GOTHICO,
	"GothicOne" => CP_GOTHICONE,
	"GothicP" => CP_GOTHICP,
	"GothicQ" => CP_GOTHICQ,
	"GothicR" => CP_GOTHICR,
	"GothicS" => CP_GOTHICS,
	"GothicSeven" => CP_GOTHICSEVEN,
	"GothicSix" => CP_GOTHICSIX,
	"GothicT" => CP_GOTHICT,
	"GothicThree" => CP_GOTHICTHREE,
	"GothicTwo" => CP_GOTHICTWO,
	"GothicU" => CP_GOTHICU,
	"GothicV" => CP_GOTHICV,
	"GothicW" => CP_GOTHICW,
	"GothicX" => CP_GOTHICX,
	"GothicY" => CP_GOTHICY,
	"GothicZ" => CP_GOTHICZ,
	"GothicZero" => CP_GOTHICZERO,
	"GrayCircle" => CP_GRAYCIRCLE,
	"GraySquare" => CP_GRAYSQUARE,
	"GreaterEqual" => CP_GREATEREQUAL,
	"GreaterEqualLess" => CP_GREATEREQUALLESS,
	"GreaterFullEqual" => CP_GREATERFULLEQUAL,
	"GreaterGreater" => CP_GREATERGREATER,
	"GreaterLess" => CP_GREATERLESS,
	"GreaterSlantEqual" => CP_GREATERSLANTEQUAL,
	"GreaterTilde" => CP_GREATERTILDE,
	"HBar" => CP_HBAR,
	"Hacek" => CP_HACEK,
	"HappySmiley" => CP_HAPPYSMILEY,
	"HeartSuit" => CP_HEARTSUIT,
	"HermitianConjugate" => CP_HERMITIANCONJUGATE,
	"HorizontalLine" => CP_HORIZONTALLINE,
	"HumpDownHump" => CP_HUMPDOWNHUMP,
	"HumpEqual" => CP_HUMPEQUAL,
	"Hyphen" => CP_HYPHEN,
	"IAcute" => CP_IACUTE,
	"ICup" => CP_ICUP,
	"IDoubleDot" => CP_IDOUBLEDOT,
	"IGrave" => CP_IGRAVE,
	"IHat" => CP_IHAT,
	"ImaginaryI" => CP_IMAGINARYI,
	"ImaginaryJ" => CP_IMAGINARYJ,
	"ImplicitPlus" => CP_IMPLICITPLUS,
	"Implies" => CP_IMPLIES,
	"IndentingNewLine" => CP_INDENTINGNEWLINE,
	"Infinity" => CP_INFINITY,
	"InlinePart" => CP_INLINEPART,
	"Integral" => CP_INTEGRAL,
	"Intersection" => CP_INTERSECTION,
	"InvisibleApplication" => CP_INVISIBLEAPPLICATION,
	"InvisibleComma" => CP_INVISIBLECOMMA,
	"InvisiblePostfixScriptBase" => CP_INVISIBLEPOSTFIXSCRIPTBASE,
	"InvisiblePrefixScriptBase" => CP_INVISIBLEPREFIXSCRIPTBASE,
	"InvisibleSpace" => CP_INVISIBLESPACE,
	"InvisibleTimes" => CP_INVISIBLETIMES,
	"Iota" => CP_IOTA,
	"Jupiter" => CP_JUPITER,
	"Kappa" => CP_KAPPA,
	"KernelIcon" => CP_KERNELICON,
	"KeyBar" => CP_KEYBAR,
	"Koppa" => CP_KOPPA,
	"LSlash" => CP_LSLASH,
	"Lambda" => CP_LAMBDA,
	"LastPage" => CP_LASTPAGE,
	"LeftAngleBracket" => CP_LEFTANGLEBRACKET,
	"LeftArrow" => CP_LEFTARROW,
	"LeftArrowBar" => CP_LEFTARROWBAR,
	"LeftArrowRightArrow" => CP_LEFTARROWRIGHTARROW,
	"LeftAssociation" => CP_LEFTASSOCIATION,
	"LeftBracketingBar" => CP_LEFTBRACKETINGBAR,
	"LeftCeiling" => CP_LEFTCEILING,
	"LeftDoubleBracket" => CP_LEFTDOUBLEBRACKET,
	"LeftDoubleBracketingBar" => CP_LEFTDOUBLEBRACKETINGBAR,
	"LeftDownTeeVector" => CP_LEFTDOWNTEEVECTOR,
	"LeftDownVector" => CP_LEFTDOWNVECTOR,
	"LeftDownVectorBar" => CP_LEFTDOWNVECTORBAR,
	"LeftFloor" => CP_LEFTFLOOR,
	"LeftGuillemet" => CP_LEFTGUILLEMET,
	"LeftModified" => CP_LEFTMODIFIED,
	"LeftPointer" => CP_LEFTPOINTER,
	"LeftRightArrow" => CP_LEFTRIGHTARROW,
	"LeftRightVector" => CP_LEFTRIGHTVECTOR,
	"LeftSkeleton" => CP_LEFTSKELETON,
	"LeftTee" => CP_LEFTTEE,
	"LeftTeeArrow" => CP_LEFTTEEARROW,
	"LeftTeeVector" => CP_LEFTTEEVECTOR,
	"LeftTriangle" => CP_LEFTTRIANGLE,
	"LeftTriangleBar" => CP_LEFTTRIANGLEBAR,
	"LeftTriangleEqual" => CP_LEFTTRIANGLEEQUAL,
	"LeftUpDownVector" => CP_LEFTUPDOWNVECTOR,
	"LeftUpTeeVector" => CP_LEFTUPTEEVECTOR,
	"LeftUpVector" => CP_LEFTUPVECTOR,
	"LeftUpVectorBar" => CP_LEFTUPVECTORBAR,
	"LeftVector" => CP_LEFTVECTOR,
	"LeftVectorBar" => CP_LEFTVECTORBAR,
	"LeoSign" => CP_LEOSIGN,
	"LessEqual" => CP_LESSEQUAL,
	"LessEqualGreater" => CP_LESSEQUALGREATER,
	"LessFullEqual" => CP_LESSFULLEQUAL,
	"LessGreater" => CP_LESSGREATER,
	"LessLess" => CP_LESSLESS,
	"LessSlantEqual" => CP_LESSSLANTEQUAL,
	"LessTilde" => CP_LESSTILDE,
	"LetterSpace" => CP_LETTERSPACE,
	"LibraSign" => CP_LIBRASIGN,
	"LightBulb" => CP_LIGHTBULB,
	"Limit" => CP_LIMIT,
	"LineSeparator" => CP_LINESEPARATOR,
	"LongDash" => CP_LONGDASH,
	"LongEqual" => CP_LONGEQUAL,
	"LongLeftArrow" => CP_LONGLEFTARROW,
	"LongLeftRightArrow" => CP_LONGLEFTRIGHTARROW,
	"LongRightArrow" => CP_LONGRIGHTARROW,
	"LowerLeftArrow" => CP_LOWERLEFTARROW,
	"LowerRightArrow" => CP_LOWERRIGHTARROW,
	"Mars" => CP_MARS,
	"MathematicaIcon" => CP_MATHEMATICAICON,
	"MaxLimit" => CP_MAXLIMIT,
	"MeasuredAngle" => CP_MEASUREDANGLE,
	"MediumSpace" => CP_MEDIUMSPACE,
	"Mercury" => CP_MERCURY,
	"Mho" => CP_MHO,
	"Micro" => CP_MICRO,
	"MinLimit" => CP_MINLIMIT,
	"Minus" => CP_MINUS,
	"MinusPlus" => CP_MINUSPLUS,
	"Mod1Key" => CP_MOD1KEY,
	"Mod2Key" => CP_MOD2KEY,
	"Moon" => CP_MOON,
	"Mu" => CP_MU,
	"NHacek" => CP_NHACEK,
	"NTilde" => CP_NTILDE,
	"Nand" => CP_NAND,
	"Natural" => CP_NATURAL,
	"NegativeMediumSpace" => CP_NEGATIVEMEDIUMSPACE,
	"NegativeThickSpace" => CP_NEGATIVETHICKSPACE,
	"NegativeThinSpace" => CP_NEGATIVETHINSPACE,
	"NegativeVeryThinSpace" => CP_NEGATIVEVERYTHINSPACE,
	"Neptune" => CP_NEPTUNE,
	"NestedGreaterGreater" => CP_NESTEDGREATERGREATER,
	"NestedLessLess" => CP_NESTEDLESSLESS,
	"NeutralSmiley" => CP_NEUTRALSMILEY,
	"NewLine" => CP_NEWLINE,
	"NoBreak" => CP_NOBREAK,
	"NonBreakingSpace" => CP_NONBREAKINGSPACE,
	"Nor" => CP_NOR,
	"Not" => CP_NOT,
	"NotCongruent" => CP_NOTCONGRUENT,
	"NotCupCap" => CP_NOTCUPCAP,
	"NotDoubleVerticalBar" => CP_NOTDOUBLEVERTICALBAR,
	"NotElement" => CP_NOTELEMENT,
	"NotEqual" => CP_NOTEQUAL,
	"NotEqualTilde" => CP_NOTEQUALTILDE,
	"NotExists" => CP_NOTEXISTS,
	"NotGreater" => CP_NOTGREATER,
	"NotGreaterEqual" => CP_NOTGREATEREQUAL,
	"NotGreaterFullEqual" => CP_NOTGREATERFULLEQUAL,
	"NotGreaterGreater" => CP_NOTGREATERGREATER,
	"NotGreaterLess" => CP_NOTGREATERLESS,
	"NotGreaterSlantEqual" => CP_NOTGREATERSLANTEQUAL,
	"NotGreaterTilde" => CP_NOTGREATERTILDE,
	"NotHumpDownHump" => CP_NOTHUMPDOWNHUMP,
	"NotHumpEqual" => CP_NOTHUMPEQUAL,
	"NotLeftTriangle" => CP_NOTLEFTTRIANGLE,
	"NotLeftTriangleBar" => CP_NOTLEFTTRIANGLEBAR,
	"NotLeftTriangleEqual" => CP_NOTLEFTTRIANGLEEQUAL,
	"NotLess" => CP_NOTLESS,
	"NotLessEqual" => CP_NOTLESSEQUAL,
	"NotLessFullEqual" => CP_NOTLESSFULLEQUAL,
	"NotLessGreater" => CP_NOTLESSGREATER,
	"NotLessLess" => CP_NOTLESSLESS,
	"NotLessSlantEqual" => CP_NOTLESSSLANTEQUAL,
	"NotLessTilde" => CP_NOTLESSTILDE,
	"NotNestedGreaterGreater" => CP_NOTNESTEDGREATERGREATER,
	"NotNestedLessLess" => CP_NOTNESTEDLESSLESS,
	"NotPrecedes" => CP_NOTPRECEDES,
	"NotPrecedesEqual" => CP_NOTPRECEDESEQUAL,
	"NotPrecedesSlantEqual" => CP_NOTPRECEDESSLANTEQUAL,
	"NotPrecedesTilde" => CP_NOTPRECEDESTILDE,
	"NotReverseElement" => CP_NOTREVERSEELEMENT,
	"NotRightTriangle" => CP_NOTRIGHTTRIANGLE,
	"NotRightTriangleBar" => CP_NOTRIGHTTRIANGLEBAR,
	"NotRightTriangleEqual" => CP_NOTRIGHTTRIANGLEEQUAL,
	"NotSquareSubset" => CP_NOTSQUARESUBSET,
	"NotSquareSubsetEqual" => CP_NOTSQUARESUBSETEQUAL,
	"NotSquareSuperset" => CP_NOTSQUARESUPERSET,
	"NotSquareSupersetEqual" => CP_NOTSQUARESUPERSETEQUAL,
	"NotSubset" => CP_NOTSUBSET,
	"NotSubsetEqual" => CP_NOTSUBSETEQUAL,
	"NotSucceeds" => CP_NOTSUCCEEDS,
	"NotSucceedsEqual" => CP_NOTSUCCEEDSEQUAL,
	"NotSucceedsSlantEqual" => CP_NOTSUCCEEDSSLANTEQUAL,
	"NotSucceedsTilde" => CP_NOTSUCCEEDSTILDE,
	"NotSuperset" => CP_NOTSUPERSET,
	"NotSupersetEqual" => CP_NOTSUPERSETEQUAL,
	"NotTilde" => CP_NOTTILDE,
	"NotTildeEqual" => CP_NOTTILDEEQUAL,
	"NotTildeFullEqual" => CP_NOTTILDEFULLEQUAL,
	"NotTildeTilde" => CP_NOTTILDETILDE,
	"NotVerticalBar" => CP_NOTVERTICALBAR,
	"Nu" => CP_NU,
	"Null" => CP_NULL,
	"NumberComma" => CP_NUMBERCOMMA,
	"NumberSign" => CP_NUMBERSIGN,
	"OAcute" => CP_OACUTE,
	"ODoubleAcute" => CP_ODOUBLEACUTE,
	"ODoubleDot" => CP_ODOUBLEDOT,
	"OE" => CP_OE,
	"OGrave" => CP_OGRAVE,
	"OHat" => CP_OHAT,
	"OSlash" => CP_OSLASH,
	"OTilde" => CP_OTILDE,
	"Omega" => CP_OMEGA,
	"Omicron" => CP_OMICRON,
	"OpenCurlyDoubleQuote" => CP_OPENCURLYDOUBLEQUOTE,
	"OpenCurlyQuote" => CP_OPENCURLYQUOTE,
	"OptionKey" => CP_OPTIONKEY,
	"Or" => CP_OR,
	"OverBrace" => CP_OVERBRACE,
	"OverBracket" => CP_OVERBRACKET,
	"OverParenthesis" => CP_OVERPARENTHESIS,
	"PageBreakAbove" => CP_PAGEBREAKABOVE,
	"PageBreakBelow" => CP_PAGEBREAKBELOW,
	"Paragraph" => CP_PARAGRAPH,
	"ParagraphSeparator" => CP_PARAGRAPHSEPARATOR,
	"PartialD" => CP_PARTIALD,
	"PermutationProduct" => CP_PERMUTATIONPRODUCT,
	"Perpendicular" => CP_PERPENDICULAR,
	"Phi" => CP_PHI,
	"Pi" => CP_PI,
	"Piecewise" => CP_PIECEWISE,
	"PiscesSign" => CP_PISCESSIGN,
	"Placeholder" => CP_PLACEHOLDER,
	"PlusMinus" => CP_PLUSMINUS,
	"Pluto" => CP_PLUTO,
	"Precedes" => CP_PRECEDES,
	"PrecedesEqual" => CP_PRECEDESEQUAL,
	"PrecedesSlantEqual" => CP_PRECEDESSLANTEQUAL,
	"PrecedesTilde" => CP_PRECEDESTILDE,
	"Prime" => CP_PRIME,
	"ProbabilityPr" => CP_PROBABILITYPR,
	"Product" => CP_PRODUCT,
	"Proportion" => CP_PROPORTION,
	"Proportional" => CP_PROPORTIONAL,
	"Psi" => CP_PSI,
	"QuarterNote" => CP_QUARTERNOTE,
	"RHacek" => CP_RHACEK,
	"RawAmpersand" => CP_RAWAMPERSAND,
	"RawAt" => CP_RAWAT,
	"RawBackquote" => CP_RAWBACKQUOTE,
	"RawBackslash" => CP_RAWBACKSLASH,
	"RawColon" => CP_RAWCOLON,
	"RawComma" => CP_RAWCOMMA,
	"RawDash" => CP_RAWDASH,
	"RawDollar" => CP_RAWDOLLAR,
	"RawDot" => CP_RAWDOT,
	"RawDoubleQuote" => CP_RAWDOUBLEQUOTE,
	"RawEqual" => CP_RAWEQUAL,
	"RawEscape" => CP_RAWESCAPE,
	"RawExclamation" => CP_RAWEXCLAMATION,
	"RawGreater" => CP_RAWGREATER,
	"RawLeftBrace" => CP_RAWLEFTBRACE,
	"RawLeftBracket" => CP_RAWLEFTBRACKET,
	"RawLeftParenthesis" => CP_RAWLEFTPARENTHESIS,
	"RawLess" => CP_RAWLESS,
	"RawNumberSign" => CP_RAWNUMBERSIGN,
	"RawPercent" => CP_RAWPERCENT,
	"RawPlus" => CP_RAWPLUS,
	"RawQuestion" => CP_RAWQUESTION,
	"RawQuote" => CP_RAWQUOTE,
	"RawReturn" => CP_RAWRETURN,
	"RawRightBrace" => CP_RAWRIGHTBRACE,
	"RawRightBracket" => CP_RAWRIGHTBRACKET,
	"RawRightParenthesis" => CP_RAWRIGHTPARENTHESIS,
	"RawSemicolon" => CP_RAWSEMICOLON,
	"RawSlash" => CP_RAWSLASH,
	"RawSpace" => CP_RAWSPACE,
	"RawStar" => CP_RAWSTAR,
	"RawTab" => CP_RAWTAB,
	"RawTilde" => CP_RAWTILDE,
	"RawUnderscore" => CP_RAWUNDERSCORE,
	"RawVerticalBar" => CP_RAWVERTICALBAR,
	"RawWedge" => CP_RAWWEDGE,
	"RegisteredTrademark" => CP_REGISTEREDTRADEMARK,
	"ReturnIndicator" => CP_RETURNINDICATOR,
	"ReturnKey" => CP_RETURNKEY,
	"ReverseDoublePrime" => CP_REVERSEDOUBLEPRIME,
	"ReverseElement" => CP_REVERSEELEMENT,
	"ReverseEquilibrium" => CP_REVERSEEQUILIBRIUM,
	"ReversePrime" => CP_REVERSEPRIME,
	"ReverseUpEquilibrium" => CP_REVERSEUPEQUILIBRIUM,
	"Rho" => CP_RHO,
	"RightAngle" => CP_RIGHTANGLE,
	"RightAngleBracket" => CP_RIGHTANGLEBRACKET,
	"RightArrow" => CP_RIGHTARROW,
	"RightArrowBar" => CP_RIGHTARROWBAR,
	"RightArrowLeftArrow" => CP_RIGHTARROWLEFTARROW,
	"RightAssociation" => CP_RIGHTASSOCIATION,
	"RightBracketingBar" => CP_RIGHTBRACKETINGBAR,
	"RightCeiling" => CP_RIGHTCEILING,
	"RightDoubleBracket" => CP_RIGHTDOUBLEBRACKET,
	"RightDoubleBracketingBar" => CP_RIGHTDOUBLEBRACKETINGBAR,
	"RightDownTeeVector" => CP_RIGHTDOWNTEEVECTOR,
	"RightDownVector" => CP_RIGHTDOWNVECTOR,
	"RightDownVectorBar" => CP_RIGHTDOWNVECTORBAR,
	"RightFloor" => CP_RIGHTFLOOR,
	"RightGuillemet" => CP_RIGHTGUILLEMET,
	"RightModified" => CP_RIGHTMODIFIED,
	"RightPointer" => CP_RIGHTPOINTER,
	"RightSkeleton" => CP_RIGHTSKELETON,
	"RightTee" => CP_RIGHTTEE,
	"RightTeeArrow" => CP_RIGHTTEEARROW,
	"RightTeeVector" => CP_RIGHTTEEVECTOR,
	"RightTriangle" => CP_RIGHTTRIANGLE,
	"RightTriangleBar" => CP_RIGHTTRIANGLEBAR,
	"RightTriangleEqual" => CP_RIGHTTRIANGLEEQUAL,
	"RightUpDownVector" => CP_RIGHTUPDOWNVECTOR,
	"RightUpTeeVector" => CP_RIGHTUPTEEVECTOR,
	"RightUpVector" => CP_RIGHTUPVECTOR,
	"RightUpVectorBar" => CP_RIGHTUPVECTORBAR,
	"RightVector" => CP_RIGHTVECTOR,
	"RightVectorBar" => CP_RIGHTVECTORBAR,
	"RoundImplies" => CP_ROUNDIMPLIES,
	"RoundSpaceIndicator" => CP_ROUNDSPACEINDICATOR,
	"Rule" => CP_RULE,
	"RuleDelayed" => CP_RULEDELAYED,
	"Rupee" => CP_RUPEE,
	"SHacek" => CP_SHACEK,
	"SZ" => CP_SZ,
	"SadSmiley" => CP_SADSMILEY,
	"SagittariusSign" => CP_SAGITTARIUSSIGN,
	"Sampi" => CP_SAMPI,
	"Saturn" => CP_SATURN,
	"ScorpioSign" => CP_SCORPIOSIGN,
	"ScriptA" => CP_SCRIPTA,
	"ScriptB" => CP_SCRIPTB,
	"ScriptC" => CP_SCRIPTC,
	"ScriptCapitalA" => CP_SCRIPTCAPITALA,
	"ScriptCapitalB" => CP_SCRIPTCAPITALB,
	"ScriptCapitalC" => CP_SCRIPTCAPITALC,
	"ScriptCapitalD" => CP_SCRIPTCAPITALD,
	"ScriptCapitalE" => CP_SCRIPTCAPITALE,
	"ScriptCapitalF" => CP_SCRIPTCAPITALF,
	"ScriptCapitalG" => CP_SCRIPTCAPITALG,
	"ScriptCapitalH" => CP_SCRIPTCAPITALH,
	"ScriptCapitalI" => CP_SCRIPTCAPITALI,
	"ScriptCapitalJ" => CP_SCRIPTCAPITALJ,
	"ScriptCapitalK" => CP_SCRIPTCAPITALK,
	"ScriptCapitalL" => CP_SCRIPTCAPITALL,
	"ScriptCapitalM" => CP_SCRIPTCAPITALM,
	"ScriptCapitalN" => CP_SCRIPTCAPITALN,
	"ScriptCapitalO" => CP_SCRIPTCAPITALO,
	"ScriptCapitalP" => CP_SCRIPTCAPITALP,
	"ScriptCapitalQ" => CP_SCRIPTCAPITALQ,
	"ScriptCapitalR" => CP_SCRIPTCAPITALR,
	"ScriptCapitalS" => CP_SCRIPTCAPITALS,
	"ScriptCapitalT" => CP_SCRIPTCAPITALT,
	"ScriptCapitalU" => CP_SCRIPTCAPITALU,
	"ScriptCapitalV" => CP_SCRIPTCAPITALV,
	"ScriptCapitalW" => CP_SCRIPTCAPITALW,
	"ScriptCapitalX" => CP_SCRIPTCAPITALX,
	"ScriptCapitalY" => CP_SCRIPTCAPITALY,
	"ScriptCapitalZ" => CP_SCRIPTCAPITALZ,
	"ScriptD" => CP_SCRIPTD,
	"ScriptDotlessI" => CP_SCRIPTDOTLESSI,
	"ScriptDotlessJ" => CP_SCRIPTDOTLESSJ,
	"ScriptE" => CP_SCRIPTE,
	"ScriptEight" => CP_SCRIPTEIGHT,
	"ScriptF" => CP_SCRIPTF,
	"ScriptFive" => CP_SCRIPTFIVE,
	"ScriptFour" => CP_SCRIPTFOUR,
	"ScriptG" => CP_SCRIPTG,
	"ScriptH" => CP_SCRIPTH,
	"ScriptI" => CP_SCRIPTI,
	"ScriptJ" => CP_SCRIPTJ,
	"ScriptK" => CP_SCRIPTK,
	"ScriptL" => CP_SCRIPTL,
	"ScriptM" => CP_SCRIPTM,
	"ScriptN" => CP_SCRIPTN,
	"ScriptNine" => CP_SCRIPTNINE,
	"ScriptO" => CP_SCRIPTO,
	"ScriptOne" => CP_SCRIPTONE,
	"ScriptP" => CP_SCRIPTP,
	"ScriptQ" => CP_SCRIPTQ,
	"ScriptR" => CP_SCRIPTR,
	"ScriptS" => CP_SCRIPTS,
	"ScriptSeven" => CP_SCRIPTSEVEN,
	"ScriptSix" => CP_SCRIPTSIX,
	"ScriptT" => CP_SCRIPTT,
	"ScriptThree" => CP_SCRIPTTHREE,
	"ScriptTwo" => CP_SCRIPTTWO,
	"ScriptU" => CP_SCRIPTU,
	"ScriptV" => CP_SCRIPTV,
	"ScriptW" => CP_SCRIPTW,
	"ScriptX" => CP_SCRIPTX,
	"ScriptY" => CP_SCRIPTY,
	"ScriptZ" => CP_SCRIPTZ,
	"ScriptZero" => CP_SCRIPTZERO,
	"Section" => CP_SECTION,
	"SelectionPlaceholder" => CP_SELECTIONPLACEHOLDER,
	"Shah" => CP_SHAH,
	"Sharp" => CP_SHARP,
	"ShiftKey" => CP_SHIFTKEY,
	"ShortDownArrow" => CP_SHORTDOWNARROW,
	"ShortLeftArrow" => CP_SHORTLEFTARROW,
	"ShortRightArrow" => CP_SHORTRIGHTARROW,
	"ShortUpArrow" => CP_SHORTUPARROW,
	"Sigma" => CP_SIGMA,
	"SixPointedStar" => CP_SIXPOINTEDSTAR,
	"SkeletonIndicator" => CP_SKELETONINDICATOR,
	"SmallCircle" => CP_SMALLCIRCLE,
	"SpaceIndicator" => CP_SPACEINDICATOR,
	"SpaceKey" => CP_SPACEKEY,
	"SpadeSuit" => CP_SPADESUIT,
	"SpanFromAbove" => CP_SPANFROMABOVE,
	"SpanFromBoth" => CP_SPANFROMBOTH,
	"SpanFromLeft" => CP_SPANFROMLEFT,
	"SphericalAngle" => CP_SPHERICALANGLE,
	"Spooky" => CP_SPOOKY,
	"Sqrt" => CP_SQRT,
	"Square" => CP_SQUARE,
	"SquareIntersection" => CP_SQUAREINTERSECTION,
	"SquareSubset" => CP_SQUARESUBSET,
	"SquareSubsetEqual" => CP_SQUARESUBSETEQUAL,
	"SquareSuperset" => CP_SQUARESUPERSET,
	"SquareSupersetEqual" => CP_SQUARESUPERSETEQUAL,
	"SquareUnion" => CP_SQUAREUNION,
	"Star" => CP_STAR,
	"StepperDown" => CP_STEPPERDOWN,
	"StepperLeft" => CP_STEPPERLEFT,
	"StepperRight" => CP_STEPPERRIGHT,
	"StepperUp" => CP_STEPPERUP,
	"Sterling" => CP_STERLING,
	"Stigma" => CP_STIGMA,
	"Subset" => CP_SUBSET,
	"SubsetEqual" => CP_SUBSETEQUAL,
	"Succeeds" => CP_SUCCEEDS,
	"SucceedsEqual" => CP_SUCCEEDSEQUAL,
	"SucceedsSlantEqual" => CP_SUCCEEDSSLANTEQUAL,
	"SucceedsTilde" => CP_SUCCEEDSTILDE,
	"SuchThat" => CP_SUCHTHAT,
	"Sum" => CP_SUM,
	"Sun" => CP_SUN,
	"Superset" => CP_SUPERSET,
	"SupersetEqual" => CP_SUPERSETEQUAL,
	"SystemEnterKey" => CP_SYSTEMENTERKEY,
	"SystemsModelDelay" => CP_SYSTEMSMODELDELAY,
	"THacek" => CP_THACEK,
	"TabKey" => CP_TABKEY,
	"Tau" => CP_TAU,
	"TaurusSign" => CP_TAURUSSIGN,
	"TensorProduct" => CP_TENSORPRODUCT,
	"TensorWedge" => CP_TENSORWEDGE,
	"Therefore" => CP_THEREFORE,
	"Theta" => CP_THETA,
	"ThickSpace" => CP_THICKSPACE,
	"ThinSpace" => CP_THINSPACE,
	"Thorn" => CP_THORN,
	"Tilde" => CP_TILDE,
	"TildeEqual" => CP_TILDEEQUAL,
	"TildeFullEqual" => CP_TILDEFULLEQUAL,
	"TildeTilde" => CP_TILDETILDE,
	"Times" => CP_TIMES,
	"Trademark" => CP_TRADEMARK,
	"Transpose" => CP_TRANSPOSE,
	"TripleDot" => CP_TRIPLEDOT,
	"TwoWayRule" => CP_TWOWAYRULE,
	"UAcute" => CP_UACUTE,
	"UDoubleAcute" => CP_UDOUBLEACUTE,
	"UDoubleDot" => CP_UDOUBLEDOT,
	"UGrave" => CP_UGRAVE,
	"UHat" => CP_UHAT,
	"URing" => CP_URING,
	"UnderBrace" => CP_UNDERBRACE,
	"UnderBracket" => CP_UNDERBRACKET,
	"UnderParenthesis" => CP_UNDERPARENTHESIS,
	"UndirectedEdge" => CP_UNDIRECTEDEDGE,
	"Union" => CP_UNION,
	"UnionPlus" => CP_UNIONPLUS,
	"UnknownGlyph" => CP_UNKNOWNGLYPH,
	"UpArrow" => CP_UPARROW,
	"UpArrowBar" => CP_UPARROWBAR,
	"UpArrowDownArrow" => CP_UPARROWDOWNARROW,
	"UpDownArrow" => CP_UPDOWNARROW,
	"UpEquilibrium" => CP_UPEQUILIBRIUM,
	"UpPointer" => CP_UPPOINTER,
	"UpTee" => CP_UPTEE,
	"UpTeeArrow" => CP_UPTEEARROW,
	"UpperLeftArrow" => CP_UPPERLEFTARROW,
	"UpperRightArrow" => CP_UPPERRIGHTARROW,
	"Upsilon" => CP_UPSILON,
	"Uranus" => CP_URANUS,
	"VectorGreater" => CP_VECTORGREATER,
	"VectorGreaterEqual" => CP_VECTORGREATEREQUAL,
	"VectorLess" => CP_VECTORLESS,
	"VectorLessEqual" => CP_VECTORLESSEQUAL,
	"Vee" => CP_VEE,
	"Venus" => CP_VENUS,
	"VerticalBar" => CP_VERTICALBAR,
	"VerticalEllipsis" => CP_VERTICALELLIPSIS,
	"VerticalLine" => CP_VERTICALLINE,
	"VerticalSeparator" => CP_VERTICALSEPARATOR,
	"VerticalTilde" => CP_VERTICALTILDE,
	"VeryThinSpace" => CP_VERYTHINSPACE,
	"Villa" => CP_VILLA,
	"VirgoSign" => CP_VIRGOSIGN,
	"WarningSign" => CP_WARNINGSIGN,
	"WatchIcon" => CP_WATCHICON,
	"Wedge" => CP_WEDGE,
	"WeierstrassP" => CP_WEIERSTRASSP,
	"WhiteBishop" => CP_WHITEBISHOP,
	"WhiteKing" => CP_WHITEKING,
	"WhiteKnight" => CP_WHITEKNIGHT,
	"WhitePawn" => CP_WHITEPAWN,
	"WhiteQueen" => CP_WHITEQUEEN,
	"WhiteRook" => CP_WHITEROOK,
	"Wolf" => CP_WOLF,
	"WolframAlphaPrompt" => CP_WOLFRAMALPHAPROMPT,
	"WolframLanguageLogo" => CP_WOLFRAMLANGUAGELOGO,
	"WolframLanguageLogoCircle" => CP_WOLFRAMLANGUAGELOGOCIRCLE,
	"Xi" => CP_XI,
	"Xnor" => CP_XNOR,
	"Xor" => CP_XOR,
	"YAcute" => CP_YACUTE,
	"YDoubleDot" => CP_YDOUBLEDOT,
	"Yen" => CP_YEN,
	"ZHacek" => CP_ZHACEK,
	"Zeta" => CP_ZETA,
};



pub const CODEPOINT_TO_LONGNAME_MAP: [(CodePoint, &str); LONGNAMES_COUNT] = [
	(CP_RAWTAB, "RawTab"),
	(CP_NEWLINE, "NewLine"),
	(CP_RAWRETURN, "RawReturn"),
	(CP_RAWESCAPE, "RawEscape"),
	(CP_RAWSPACE, "RawSpace"),
	(CP_RAWEXCLAMATION, "RawExclamation"),
	(CP_RAWDOUBLEQUOTE, "RawDoubleQuote"),
	(CP_RAWNUMBERSIGN, "RawNumberSign"),
	(CP_RAWDOLLAR, "RawDollar"),
	(CP_RAWPERCENT, "RawPercent"),
	(CP_RAWAMPERSAND, "RawAmpersand"),
	(CP_RAWQUOTE, "RawQuote"),
	(CP_RAWLEFTPARENTHESIS, "RawLeftParenthesis"),
	(CP_RAWRIGHTPARENTHESIS, "RawRightParenthesis"),
	(CP_RAWSTAR, "RawStar"),
	(CP_RAWPLUS, "RawPlus"),
	(CP_RAWCOMMA, "RawComma"),
	(CP_RAWDASH, "RawDash"),
	(CP_RAWDOT, "RawDot"),
	(CP_RAWSLASH, "RawSlash"),
	(CP_RAWCOLON, "RawColon"),
	(CP_RAWSEMICOLON, "RawSemicolon"),
	(CP_RAWLESS, "RawLess"),
	(CP_RAWEQUAL, "RawEqual"),
	(CP_RAWGREATER, "RawGreater"),
	(CP_RAWQUESTION, "RawQuestion"),
	(CP_RAWAT, "RawAt"),
	(CP_RAWLEFTBRACKET, "RawLeftBracket"),
	(CP_RAWBACKSLASH, "RawBackslash"),
	(CP_RAWRIGHTBRACKET, "RawRightBracket"),
	(CP_RAWWEDGE, "RawWedge"),
	(CP_RAWUNDERSCORE, "RawUnderscore"),
	(CP_RAWBACKQUOTE, "RawBackquote"),
	(CP_RAWLEFTBRACE, "RawLeftBrace"),
	(CP_RAWVERTICALBAR, "RawVerticalBar"),
	(CP_RAWRIGHTBRACE, "RawRightBrace"),
	(CP_RAWTILDE, "RawTilde"),
	(CP_NONBREAKINGSPACE, "NonBreakingSpace"),
	(CP_DOWNEXCLAMATION, "DownExclamation"),
	(CP_CENT, "Cent"),
	(CP_STERLING, "Sterling"),
	(CP_CURRENCY, "Currency"),
	(CP_YEN, "Yen"),
	(CP_SECTION, "Section"),
	(CP_DOUBLEDOT, "DoubleDot"),
	(CP_COPYRIGHT, "Copyright"),
	(CP_LEFTGUILLEMET, "LeftGuillemet"),
	(CP_NOT, "Not"),
	(CP_DISCRETIONARYHYPHEN, "DiscretionaryHyphen"),
	(CP_REGISTEREDTRADEMARK, "RegisteredTrademark"),
	(CP_DEGREE, "Degree"),
	(CP_PLUSMINUS, "PlusMinus"),
	(CP_MICRO, "Micro"),
	(CP_PARAGRAPH, "Paragraph"),
	(CP_CENTERDOT, "CenterDot"),
	(CP_CEDILLA, "Cedilla"),
	(CP_RIGHTGUILLEMET, "RightGuillemet"),
	(CP_DOWNQUESTION, "DownQuestion"),
	(CP_CAPITALAGRAVE, "CapitalAGrave"),
	(CP_CAPITALAACUTE, "CapitalAAcute"),
	(CP_CAPITALAHAT, "CapitalAHat"),
	(CP_CAPITALATILDE, "CapitalATilde"),
	(CP_CAPITALADOUBLEDOT, "CapitalADoubleDot"),
	(CP_CAPITALARING, "CapitalARing"),
	(CP_CAPITALAE, "CapitalAE"),
	(CP_CAPITALCCEDILLA, "CapitalCCedilla"),
	(CP_CAPITALEGRAVE, "CapitalEGrave"),
	(CP_CAPITALEACUTE, "CapitalEAcute"),
	(CP_CAPITALEHAT, "CapitalEHat"),
	(CP_CAPITALEDOUBLEDOT, "CapitalEDoubleDot"),
	(CP_CAPITALIGRAVE, "CapitalIGrave"),
	(CP_CAPITALIACUTE, "CapitalIAcute"),
	(CP_CAPITALIHAT, "CapitalIHat"),
	(CP_CAPITALIDOUBLEDOT, "CapitalIDoubleDot"),
	(CP_CAPITALETH, "CapitalEth"),
	(CP_CAPITALNTILDE, "CapitalNTilde"),
	(CP_CAPITALOGRAVE, "CapitalOGrave"),
	(CP_CAPITALOACUTE, "CapitalOAcute"),
	(CP_CAPITALOHAT, "CapitalOHat"),
	(CP_CAPITALOTILDE, "CapitalOTilde"),
	(CP_CAPITALODOUBLEDOT, "CapitalODoubleDot"),
	(CP_TIMES, "Times"),
	(CP_CAPITALOSLASH, "CapitalOSlash"),
	(CP_CAPITALUGRAVE, "CapitalUGrave"),
	(CP_CAPITALUACUTE, "CapitalUAcute"),
	(CP_CAPITALUHAT, "CapitalUHat"),
	(CP_CAPITALUDOUBLEDOT, "CapitalUDoubleDot"),
	(CP_CAPITALYACUTE, "CapitalYAcute"),
	(CP_CAPITALTHORN, "CapitalThorn"),
	(CP_SZ, "SZ"),
	(CP_AGRAVE, "AGrave"),
	(CP_AACUTE, "AAcute"),
	(CP_AHAT, "AHat"),
	(CP_ATILDE, "ATilde"),
	(CP_ADOUBLEDOT, "ADoubleDot"),
	(CP_ARING, "ARing"),
	(CP_AE, "AE"),
	(CP_CCEDILLA, "CCedilla"),
	(CP_EGRAVE, "EGrave"),
	(CP_EACUTE, "EAcute"),
	(CP_EHAT, "EHat"),
	(CP_EDOUBLEDOT, "EDoubleDot"),
	(CP_IGRAVE, "IGrave"),
	(CP_IACUTE, "IAcute"),
	(CP_IHAT, "IHat"),
	(CP_IDOUBLEDOT, "IDoubleDot"),
	(CP_ETH, "Eth"),
	(CP_NTILDE, "NTilde"),
	(CP_OGRAVE, "OGrave"),
	(CP_OACUTE, "OAcute"),
	(CP_OHAT, "OHat"),
	(CP_OTILDE, "OTilde"),
	(CP_ODOUBLEDOT, "ODoubleDot"),
	(CP_DIVIDE, "Divide"),
	(CP_OSLASH, "OSlash"),
	(CP_UGRAVE, "UGrave"),
	(CP_UACUTE, "UAcute"),
	(CP_UHAT, "UHat"),
	(CP_UDOUBLEDOT, "UDoubleDot"),
	(CP_YACUTE, "YAcute"),
	(CP_THORN, "Thorn"),
	(CP_YDOUBLEDOT, "YDoubleDot"),
	(CP_CAPITALABAR, "CapitalABar"),
	(CP_ABAR, "ABar"),
	(CP_CAPITALACUP, "CapitalACup"),
	(CP_ACUP, "ACup"),
	(CP_CAPITALCACUTE, "CapitalCAcute"),
	(CP_CACUTE, "CAcute"),
	(CP_CAPITALCHACEK, "CapitalCHacek"),
	(CP_CHACEK, "CHacek"),
	(CP_CAPITALDHACEK, "CapitalDHacek"),
	(CP_DHACEK, "DHacek"),
	(CP_CAPITALEBAR, "CapitalEBar"),
	(CP_EBAR, "EBar"),
	(CP_CAPITALECUP, "CapitalECup"),
	(CP_ECUP, "ECup"),
	(CP_CAPITALEHACEK, "CapitalEHacek"),
	(CP_EHACEK, "EHacek"),
	(CP_CAPITALICUP, "CapitalICup"),
	(CP_ICUP, "ICup"),
	(CP_DOTLESSI, "DotlessI"),
	(CP_CAPITALLSLASH, "CapitalLSlash"),
	(CP_LSLASH, "LSlash"),
	(CP_CAPITALNHACEK, "CapitalNHacek"),
	(CP_NHACEK, "NHacek"),
	(CP_CAPITALODOUBLEACUTE, "CapitalODoubleAcute"),
	(CP_ODOUBLEACUTE, "ODoubleAcute"),
	(CP_CAPITALOE, "CapitalOE"),
	(CP_OE, "OE"),
	(CP_CAPITALRHACEK, "CapitalRHacek"),
	(CP_RHACEK, "RHacek"),
	(CP_CAPITALSHACEK, "CapitalSHacek"),
	(CP_SHACEK, "SHacek"),
	(CP_CAPITALTHACEK, "CapitalTHacek"),
	(CP_THACEK, "THacek"),
	(CP_CAPITALURING, "CapitalURing"),
	(CP_URING, "URing"),
	(CP_CAPITALUDOUBLEACUTE, "CapitalUDoubleAcute"),
	(CP_UDOUBLEACUTE, "UDoubleAcute"),
	(CP_CAPITALZHACEK, "CapitalZHacek"),
	(CP_ZHACEK, "ZHacek"),
	(CP_FLORIN, "Florin"),
	(CP_HACEK, "Hacek"),
	(CP_BREVE, "Breve"),
	(CP_CAPITALALPHA, "CapitalAlpha"),
	(CP_CAPITALBETA, "CapitalBeta"),
	(CP_CAPITALGAMMA, "CapitalGamma"),
	(CP_CAPITALDELTA, "CapitalDelta"),
	(CP_CAPITALEPSILON, "CapitalEpsilon"),
	(CP_CAPITALZETA, "CapitalZeta"),
	(CP_CAPITALETA, "CapitalEta"),
	(CP_CAPITALTHETA, "CapitalTheta"),
	(CP_CAPITALIOTA, "CapitalIota"),
	(CP_CAPITALKAPPA, "CapitalKappa"),
	(CP_CAPITALLAMBDA, "CapitalLambda"),
	(CP_CAPITALMU, "CapitalMu"),
	(CP_CAPITALNU, "CapitalNu"),
	(CP_CAPITALXI, "CapitalXi"),
	(CP_CAPITALOMICRON, "CapitalOmicron"),
	(CP_CAPITALPI, "CapitalPi"),
	(CP_CAPITALRHO, "CapitalRho"),
	(CP_CAPITALSIGMA, "CapitalSigma"),
	(CP_CAPITALTAU, "CapitalTau"),
	(CP_CAPITALUPSILON, "CapitalUpsilon"),
	(CP_CAPITALPHI, "CapitalPhi"),
	(CP_CAPITALCHI, "CapitalChi"),
	(CP_CAPITALPSI, "CapitalPsi"),
	(CP_CAPITALOMEGA, "CapitalOmega"),
	(CP_ALPHA, "Alpha"),
	(CP_BETA, "Beta"),
	(CP_GAMMA, "Gamma"),
	(CP_DELTA, "Delta"),
	(CP_CURLYEPSILON, "CurlyEpsilon"),
	(CP_ZETA, "Zeta"),
	(CP_ETA, "Eta"),
	(CP_THETA, "Theta"),
	(CP_IOTA, "Iota"),
	(CP_KAPPA, "Kappa"),
	(CP_LAMBDA, "Lambda"),
	(CP_MU, "Mu"),
	(CP_NU, "Nu"),
	(CP_XI, "Xi"),
	(CP_OMICRON, "Omicron"),
	(CP_PI, "Pi"),
	(CP_RHO, "Rho"),
	(CP_FINALSIGMA, "FinalSigma"),
	(CP_SIGMA, "Sigma"),
	(CP_TAU, "Tau"),
	(CP_UPSILON, "Upsilon"),
	(CP_CURLYPHI, "CurlyPhi"),
	(CP_CHI, "Chi"),
	(CP_PSI, "Psi"),
	(CP_OMEGA, "Omega"),
	(CP_CURLYTHETA, "CurlyTheta"),
	(CP_CURLYCAPITALUPSILON, "CurlyCapitalUpsilon"),
	(CP_PHI, "Phi"),
	(CP_CURLYPI, "CurlyPi"),
	(CP_CAPITALSTIGMA, "CapitalStigma"),
	(CP_STIGMA, "Stigma"),
	(CP_CAPITALDIGAMMA, "CapitalDigamma"),
	(CP_DIGAMMA, "Digamma"),
	(CP_CAPITALKOPPA, "CapitalKoppa"),
	(CP_KOPPA, "Koppa"),
	(CP_CAPITALSAMPI, "CapitalSampi"),
	(CP_SAMPI, "Sampi"),
	(CP_CURLYKAPPA, "CurlyKappa"),
	(CP_CURLYRHO, "CurlyRho"),
	(CP_EPSILON, "Epsilon"),
	(CP_THICKSPACE, "ThickSpace"),
	(CP_THINSPACE, "ThinSpace"),
	(CP_VERYTHINSPACE, "VeryThinSpace"),
	(CP_HYPHEN, "Hyphen"),
	(CP_DASH, "Dash"),
	(CP_LONGDASH, "LongDash"),
	(CP_OPENCURLYQUOTE, "OpenCurlyQuote"),
	(CP_CLOSECURLYQUOTE, "CloseCurlyQuote"),
	(CP_OPENCURLYDOUBLEQUOTE, "OpenCurlyDoubleQuote"),
	(CP_CLOSECURLYDOUBLEQUOTE, "CloseCurlyDoubleQuote"),
	(CP_DAGGER, "Dagger"),
	(CP_DOUBLEDAGGER, "DoubleDagger"),
	(CP_BULLET, "Bullet"),
	(CP_ELLIPSIS, "Ellipsis"),
	(CP_LINESEPARATOR, "LineSeparator"),
	(CP_PARAGRAPHSEPARATOR, "ParagraphSeparator"),
	(CP_PRIME, "Prime"),
	(CP_DOUBLEPRIME, "DoublePrime"),
	(CP_REVERSEPRIME, "ReversePrime"),
	(CP_REVERSEDOUBLEPRIME, "ReverseDoublePrime"),
	(CP_SKELETONINDICATOR, "SkeletonIndicator"),
	(CP_MEDIUMSPACE, "MediumSpace"),
	(CP_NOBREAK, "NoBreak"),
	(CP_INVISIBLETIMES, "InvisibleTimes"),
	(CP_EURO, "Euro"),
	(CP_RUPEE, "Rupee"),
	(CP_SCRIPTG, "ScriptG"),
	(CP_SCRIPTCAPITALH, "ScriptCapitalH"),
	(CP_GOTHICCAPITALH, "GothicCapitalH"),
	(CP_HBAR, "HBar"),
	(CP_SCRIPTCAPITALI, "ScriptCapitalI"),
	(CP_GOTHICCAPITALI, "GothicCapitalI"),
	(CP_SCRIPTCAPITALL, "ScriptCapitalL"),
	(CP_SCRIPTL, "ScriptL"),
	(CP_WEIERSTRASSP, "WeierstrassP"),
	(CP_SCRIPTCAPITALR, "ScriptCapitalR"),
	(CP_GOTHICCAPITALR, "GothicCapitalR"),
	(CP_TRADEMARK, "Trademark"),
	(CP_MHO, "Mho"),
	(CP_GOTHICCAPITALZ, "GothicCapitalZ"),
	(CP_ANGSTROM, "Angstrom"),
	(CP_SCRIPTCAPITALB, "ScriptCapitalB"),
	(CP_GOTHICCAPITALC, "GothicCapitalC"),
	(CP_SCRIPTE, "ScriptE"),
	(CP_SCRIPTCAPITALE, "ScriptCapitalE"),
	(CP_SCRIPTCAPITALF, "ScriptCapitalF"),
	(CP_SCRIPTCAPITALM, "ScriptCapitalM"),
	(CP_SCRIPTO, "ScriptO"),
	(CP_ALEPH, "Aleph"),
	(CP_BET, "Bet"),
	(CP_GIMEL, "Gimel"),
	(CP_DALET, "Dalet"),
	(CP_LEFTARROW, "LeftArrow"),
	(CP_UPARROW, "UpArrow"),
	(CP_RIGHTARROW, "RightArrow"),
	(CP_DOWNARROW, "DownArrow"),
	(CP_LEFTRIGHTARROW, "LeftRightArrow"),
	(CP_UPDOWNARROW, "UpDownArrow"),
	(CP_UPPERLEFTARROW, "UpperLeftArrow"),
	(CP_UPPERRIGHTARROW, "UpperRightArrow"),
	(CP_LOWERRIGHTARROW, "LowerRightArrow"),
	(CP_LOWERLEFTARROW, "LowerLeftArrow"),
	(CP_LEFTTEEARROW, "LeftTeeArrow"),
	(CP_UPTEEARROW, "UpTeeArrow"),
	(CP_RIGHTTEEARROW, "RightTeeArrow"),
	(CP_DOWNTEEARROW, "DownTeeArrow"),
	(CP_RETURNINDICATOR, "ReturnIndicator"),
	(CP_LEFTVECTOR, "LeftVector"),
	(CP_DOWNLEFTVECTOR, "DownLeftVector"),
	(CP_RIGHTUPVECTOR, "RightUpVector"),
	(CP_LEFTUPVECTOR, "LeftUpVector"),
	(CP_RIGHTVECTOR, "RightVector"),
	(CP_DOWNRIGHTVECTOR, "DownRightVector"),
	(CP_RIGHTDOWNVECTOR, "RightDownVector"),
	(CP_LEFTDOWNVECTOR, "LeftDownVector"),
	(CP_RIGHTARROWLEFTARROW, "RightArrowLeftArrow"),
	(CP_UPARROWDOWNARROW, "UpArrowDownArrow"),
	(CP_LEFTARROWRIGHTARROW, "LeftArrowRightArrow"),
	(CP_REVERSEEQUILIBRIUM, "ReverseEquilibrium"),
	(CP_EQUILIBRIUM, "Equilibrium"),
	(CP_DOUBLELEFTARROW, "DoubleLeftArrow"),
	(CP_DOUBLEUPARROW, "DoubleUpArrow"),
	(CP_DOUBLERIGHTARROW, "DoubleRightArrow"),
	(CP_DOUBLEDOWNARROW, "DoubleDownArrow"),
	(CP_DOUBLELEFTRIGHTARROW, "DoubleLeftRightArrow"),
	(CP_DOUBLEUPDOWNARROW, "DoubleUpDownArrow"),
	(CP_LEFTARROWBAR, "LeftArrowBar"),
	(CP_RIGHTARROWBAR, "RightArrowBar"),
	(CP_DOWNARROWUPARROW, "DownArrowUpArrow"),
	(CP_FORALL, "ForAll"),
	(CP_PARTIALD, "PartialD"),
	(CP_EXISTS, "Exists"),
	(CP_NOTEXISTS, "NotExists"),
	(CP_EMPTYSET, "EmptySet"),
	(CP_DEL, "Del"),
	(CP_ELEMENT, "Element"),
	(CP_NOTELEMENT, "NotElement"),
	(CP_REVERSEELEMENT, "ReverseElement"),
	(CP_NOTREVERSEELEMENT, "NotReverseElement"),
	(CP_SUCHTHAT, "SuchThat"),
	(CP_PRODUCT, "Product"),
	(CP_COPRODUCT, "Coproduct"),
	(CP_SUM, "Sum"),
	(CP_MINUS, "Minus"),
	(CP_MINUSPLUS, "MinusPlus"),
	(CP_DIVISIONSLASH, "DivisionSlash"),
	(CP_BACKSLASH, "Backslash"),
	(CP_SMALLCIRCLE, "SmallCircle"),
	(CP_SQRT, "Sqrt"),
	(CP_CUBEROOT, "CubeRoot"),
	(CP_PROPORTIONAL, "Proportional"),
	(CP_INFINITY, "Infinity"),
	(CP_RIGHTANGLE, "RightAngle"),
	(CP_ANGLE, "Angle"),
	(CP_MEASUREDANGLE, "MeasuredAngle"),
	(CP_SPHERICALANGLE, "SphericalAngle"),
	(CP_DIVIDES, "Divides"),
	(CP_DOUBLEVERTICALBAR, "DoubleVerticalBar"),
	(CP_NOTDOUBLEVERTICALBAR, "NotDoubleVerticalBar"),
	(CP_AND, "And"),
	(CP_OR, "Or"),
	(CP_INTEGRAL, "Integral"),
	(CP_CONTOURINTEGRAL, "ContourIntegral"),
	(CP_DOUBLECONTOURINTEGRAL, "DoubleContourIntegral"),
	(CP_CLOCKWISECONTOURINTEGRAL, "ClockwiseContourIntegral"),
	(CP_COUNTERCLOCKWISECONTOURINTEGRAL, "CounterClockwiseContourIntegral"),
	(CP_THEREFORE, "Therefore"),
	(CP_BECAUSE, "Because"),
	(CP_COLON, "Colon"),
	(CP_PROPORTION, "Proportion"),
	(CP_TILDE, "Tilde"),
	(CP_VERTICALTILDE, "VerticalTilde"),
	(CP_NOTTILDE, "NotTilde"),
	(CP_EQUALTILDE, "EqualTilde"),
	(CP_TILDEEQUAL, "TildeEqual"),
	(CP_NOTTILDEEQUAL, "NotTildeEqual"),
	(CP_TILDEFULLEQUAL, "TildeFullEqual"),
	(CP_NOTTILDEFULLEQUAL, "NotTildeFullEqual"),
	(CP_TILDETILDE, "TildeTilde"),
	(CP_NOTTILDETILDE, "NotTildeTilde"),
	(CP_CUPCAP, "CupCap"),
	(CP_HUMPDOWNHUMP, "HumpDownHump"),
	(CP_HUMPEQUAL, "HumpEqual"),
	(CP_DOTEQUAL, "DotEqual"),
	(CP_NOTEQUAL, "NotEqual"),
	(CP_CONGRUENT, "Congruent"),
	(CP_NOTCONGRUENT, "NotCongruent"),
	(CP_LESSEQUAL, "LessEqual"),
	(CP_GREATEREQUAL, "GreaterEqual"),
	(CP_LESSFULLEQUAL, "LessFullEqual"),
	(CP_GREATERFULLEQUAL, "GreaterFullEqual"),
	(CP_NOTLESSFULLEQUAL, "NotLessFullEqual"),
	(CP_NOTGREATERFULLEQUAL, "NotGreaterFullEqual"),
	(CP_LESSLESS, "LessLess"),
	(CP_GREATERGREATER, "GreaterGreater"),
	(CP_NOTCUPCAP, "NotCupCap"),
	(CP_NOTLESS, "NotLess"),
	(CP_NOTGREATER, "NotGreater"),
	(CP_NOTLESSEQUAL, "NotLessEqual"),
	(CP_NOTGREATEREQUAL, "NotGreaterEqual"),
	(CP_LESSTILDE, "LessTilde"),
	(CP_GREATERTILDE, "GreaterTilde"),
	(CP_NOTLESSTILDE, "NotLessTilde"),
	(CP_NOTGREATERTILDE, "NotGreaterTilde"),
	(CP_LESSGREATER, "LessGreater"),
	(CP_GREATERLESS, "GreaterLess"),
	(CP_NOTLESSGREATER, "NotLessGreater"),
	(CP_NOTGREATERLESS, "NotGreaterLess"),
	(CP_PRECEDES, "Precedes"),
	(CP_SUCCEEDS, "Succeeds"),
	(CP_PRECEDESSLANTEQUAL, "PrecedesSlantEqual"),
	(CP_SUCCEEDSSLANTEQUAL, "SucceedsSlantEqual"),
	(CP_PRECEDESTILDE, "PrecedesTilde"),
	(CP_SUCCEEDSTILDE, "SucceedsTilde"),
	(CP_NOTPRECEDES, "NotPrecedes"),
	(CP_NOTSUCCEEDS, "NotSucceeds"),
	(CP_SUBSET, "Subset"),
	(CP_SUPERSET, "Superset"),
	(CP_NOTSUBSET, "NotSubset"),
	(CP_NOTSUPERSET, "NotSuperset"),
	(CP_SUBSETEQUAL, "SubsetEqual"),
	(CP_SUPERSETEQUAL, "SupersetEqual"),
	(CP_NOTSUBSETEQUAL, "NotSubsetEqual"),
	(CP_NOTSUPERSETEQUAL, "NotSupersetEqual"),
	(CP_UNIONPLUS, "UnionPlus"),
	(CP_SQUARESUBSET, "SquareSubset"),
	(CP_SQUARESUPERSET, "SquareSuperset"),
	(CP_SQUARESUBSETEQUAL, "SquareSubsetEqual"),
	(CP_SQUARESUPERSETEQUAL, "SquareSupersetEqual"),
	(CP_SQUAREINTERSECTION, "SquareIntersection"),
	(CP_SQUAREUNION, "SquareUnion"),
	(CP_CIRCLEPLUS, "CirclePlus"),
	(CP_CIRCLEMINUS, "CircleMinus"),
	(CP_CIRCLETIMES, "CircleTimes"),
	(CP_CIRCLEDOT, "CircleDot"),
	(CP_RIGHTTEE, "RightTee"),
	(CP_LEFTTEE, "LeftTee"),
	(CP_DOWNTEE, "DownTee"),
	(CP_UPTEE, "UpTee"),
	(CP_DOUBLERIGHTTEE, "DoubleRightTee"),
	(CP_LEFTTRIANGLE, "LeftTriangle"),
	(CP_RIGHTTRIANGLE, "RightTriangle"),
	(CP_LEFTTRIANGLEEQUAL, "LeftTriangleEqual"),
	(CP_RIGHTTRIANGLEEQUAL, "RightTriangleEqual"),
	(CP_XOR, "Xor"),
	(CP_NAND, "Nand"),
	(CP_NOR, "Nor"),
	(CP_WEDGE, "Wedge"),
	(CP_VEE, "Vee"),
	(CP_INTERSECTION, "Intersection"),
	(CP_UNION, "Union"),
	(CP_DIAMOND, "Diamond"),
	(CP_STAR, "Star"),
	(CP_LESSEQUALGREATER, "LessEqualGreater"),
	(CP_GREATEREQUALLESS, "GreaterEqualLess"),
	(CP_NOTPRECEDESSLANTEQUAL, "NotPrecedesSlantEqual"),
	(CP_NOTSUCCEEDSSLANTEQUAL, "NotSucceedsSlantEqual"),
	(CP_NOTSQUARESUBSETEQUAL, "NotSquareSubsetEqual"),
	(CP_NOTSQUARESUPERSETEQUAL, "NotSquareSupersetEqual"),
	(CP_NOTPRECEDESTILDE, "NotPrecedesTilde"),
	(CP_NOTSUCCEEDSTILDE, "NotSucceedsTilde"),
	(CP_NOTLEFTTRIANGLE, "NotLeftTriangle"),
	(CP_NOTRIGHTTRIANGLE, "NotRightTriangle"),
	(CP_NOTLEFTTRIANGLEEQUAL, "NotLeftTriangleEqual"),
	(CP_NOTRIGHTTRIANGLEEQUAL, "NotRightTriangleEqual"),
	(CP_VERTICALELLIPSIS, "VerticalEllipsis"),
	(CP_CENTERELLIPSIS, "CenterEllipsis"),
	(CP_ASCENDINGELLIPSIS, "AscendingEllipsis"),
	(CP_DESCENDINGELLIPSIS, "DescendingEllipsis"),
	(CP_DIAMETER, "Diameter"),
	(CP_LEFTCEILING, "LeftCeiling"),
	(CP_RIGHTCEILING, "RightCeiling"),
	(CP_LEFTFLOOR, "LeftFloor"),
	(CP_RIGHTFLOOR, "RightFloor"),
	(CP_CLOVERLEAF, "CloverLeaf"),
	(CP_WATCHICON, "WatchIcon"),
	(CP_CAP, "Cap"),
	(CP_CUP, "Cup"),
	(CP_LEFTANGLEBRACKET, "LeftAngleBracket"),
	(CP_RIGHTANGLEBRACKET, "RightAngleBracket"),
	(CP_OVERBRACKET, "OverBracket"),
	(CP_UNDERBRACKET, "UnderBracket"),
	(CP_SPACEINDICATOR, "SpaceIndicator"),
	(CP_HORIZONTALLINE, "HorizontalLine"),
	(CP_VERTICALLINE, "VerticalLine"),
	(CP_FILLEDSQUARE, "FilledSquare"),
	(CP_EMPTYSQUARE, "EmptySquare"),
	(CP_FILLEDVERYSMALLSQUARE, "FilledVerySmallSquare"),
	(CP_EMPTYVERYSMALLSQUARE, "EmptyVerySmallSquare"),
	(CP_FILLEDRECTANGLE, "FilledRectangle"),
	(CP_EMPTYRECTANGLE, "EmptyRectangle"),
	(CP_FILLEDUPTRIANGLE, "FilledUpTriangle"),
	(CP_EMPTYUPTRIANGLE, "EmptyUpTriangle"),
	(CP_UPPOINTER, "UpPointer"),
	(CP_FILLEDRIGHTTRIANGLE, "FilledRightTriangle"),
	(CP_RIGHTPOINTER, "RightPointer"),
	(CP_FILLEDDOWNTRIANGLE, "FilledDownTriangle"),
	(CP_EMPTYDOWNTRIANGLE, "EmptyDownTriangle"),
	(CP_DOWNPOINTER, "DownPointer"),
	(CP_FILLEDLEFTTRIANGLE, "FilledLeftTriangle"),
	(CP_LEFTPOINTER, "LeftPointer"),
	(CP_FILLEDDIAMOND, "FilledDiamond"),
	(CP_EMPTYDIAMOND, "EmptyDiamond"),
	(CP_EMPTYCIRCLE, "EmptyCircle"),
	(CP_FILLEDCIRCLE, "FilledCircle"),
	(CP_EMPTYSMALLCIRCLE, "EmptySmallCircle"),
	(CP_EMPTYSMALLSQUARE, "EmptySmallSquare"),
	(CP_FILLEDSMALLSQUARE, "FilledSmallSquare"),
	(CP_FIVEPOINTEDSTAR, "FivePointedStar"),
	(CP_SUN, "Sun"),
	(CP_CHECKMARKEDBOX, "CheckmarkedBox"),
	(CP_CHECKEDBOX, "CheckedBox"),
	(CP_SADSMILEY, "SadSmiley"),
	(CP_HAPPYSMILEY, "HappySmiley"),
	(CP_MOON, "Moon"),
	(CP_MERCURY, "Mercury"),
	(CP_VENUS, "Venus"),
	(CP_MARS, "Mars"),
	(CP_JUPITER, "Jupiter"),
	(CP_SATURN, "Saturn"),
	(CP_NEPTUNE, "Neptune"),
	(CP_PLUTO, "Pluto"),
	(CP_ARIESSIGN, "AriesSign"),
	(CP_TAURUSSIGN, "TaurusSign"),
	(CP_GEMINISIGN, "GeminiSign"),
	(CP_CANCERSIGN, "CancerSign"),
	(CP_LEOSIGN, "LeoSign"),
	(CP_VIRGOSIGN, "VirgoSign"),
	(CP_LIBRASIGN, "LibraSign"),
	(CP_SCORPIOSIGN, "ScorpioSign"),
	(CP_SAGITTARIUSSIGN, "SagittariusSign"),
	(CP_CAPRICORNSIGN, "CapricornSign"),
	(CP_AQUARIUSSIGN, "AquariusSign"),
	(CP_PISCESSIGN, "PiscesSign"),
	(CP_WHITEKING, "WhiteKing"),
	(CP_WHITEQUEEN, "WhiteQueen"),
	(CP_WHITEROOK, "WhiteRook"),
	(CP_WHITEBISHOP, "WhiteBishop"),
	(CP_WHITEKNIGHT, "WhiteKnight"),
	(CP_WHITEPAWN, "WhitePawn"),
	(CP_BLACKKING, "BlackKing"),
	(CP_BLACKQUEEN, "BlackQueen"),
	(CP_BLACKROOK, "BlackRook"),
	(CP_BLACKBISHOP, "BlackBishop"),
	(CP_BLACKKNIGHT, "BlackKnight"),
	(CP_BLACKPAWN, "BlackPawn"),
	(CP_SPADESUIT, "SpadeSuit"),
	(CP_HEARTSUIT, "HeartSuit"),
	(CP_DIAMONDSUIT, "DiamondSuit"),
	(CP_CLUBSUIT, "ClubSuit"),
	(CP_QUARTERNOTE, "QuarterNote"),
	(CP_EIGHTHNOTE, "EighthNote"),
	(CP_BEAMEDEIGHTHNOTE, "BeamedEighthNote"),
	(CP_BEAMEDSIXTEENTHNOTE, "BeamedSixteenthNote"),
	(CP_FLAT, "Flat"),
	(CP_NATURAL, "Natural"),
	(CP_SHARP, "Sharp"),
	(CP_URANUS, "Uranus"),
	(CP_CHECKMARK, "Checkmark"),
	(CP_SIXPOINTEDSTAR, "SixPointedStar"),
	(CP_PERPENDICULAR, "Perpendicular"),
	(CP_LONGLEFTARROW, "LongLeftArrow"),
	(CP_LONGRIGHTARROW, "LongRightArrow"),
	(CP_LONGLEFTRIGHTARROW, "LongLeftRightArrow"),
	(CP_DOUBLELONGLEFTARROW, "DoubleLongLeftArrow"),
	(CP_DOUBLELONGRIGHTARROW, "DoubleLongRightArrow"),
	(CP_DOUBLELONGLEFTRIGHTARROW, "DoubleLongLeftRightArrow"),
	(CP_UPARROWBAR, "UpArrowBar"),
	(CP_DOWNARROWBAR, "DownArrowBar"),
	(CP_LEFTRIGHTVECTOR, "LeftRightVector"),
	(CP_RIGHTUPDOWNVECTOR, "RightUpDownVector"),
	(CP_DOWNLEFTRIGHTVECTOR, "DownLeftRightVector"),
	(CP_LEFTUPDOWNVECTOR, "LeftUpDownVector"),
	(CP_LEFTVECTORBAR, "LeftVectorBar"),
	(CP_RIGHTVECTORBAR, "RightVectorBar"),
	(CP_RIGHTUPVECTORBAR, "RightUpVectorBar"),
	(CP_RIGHTDOWNVECTORBAR, "RightDownVectorBar"),
	(CP_DOWNLEFTVECTORBAR, "DownLeftVectorBar"),
	(CP_DOWNRIGHTVECTORBAR, "DownRightVectorBar"),
	(CP_LEFTUPVECTORBAR, "LeftUpVectorBar"),
	(CP_LEFTDOWNVECTORBAR, "LeftDownVectorBar"),
	(CP_LEFTTEEVECTOR, "LeftTeeVector"),
	(CP_RIGHTTEEVECTOR, "RightTeeVector"),
	(CP_RIGHTUPTEEVECTOR, "RightUpTeeVector"),
	(CP_RIGHTDOWNTEEVECTOR, "RightDownTeeVector"),
	(CP_DOWNLEFTTEEVECTOR, "DownLeftTeeVector"),
	(CP_DOWNRIGHTTEEVECTOR, "DownRightTeeVector"),
	(CP_LEFTUPTEEVECTOR, "LeftUpTeeVector"),
	(CP_LEFTDOWNTEEVECTOR, "LeftDownTeeVector"),
	(CP_UPEQUILIBRIUM, "UpEquilibrium"),
	(CP_REVERSEUPEQUILIBRIUM, "ReverseUpEquilibrium"),
	(CP_ROUNDIMPLIES, "RoundImplies"),
	(CP_LEFTTRIANGLEBAR, "LeftTriangleBar"),
	(CP_RIGHTTRIANGLEBAR, "RightTriangleBar"),
	(CP_EQUIVALENT, "Equivalent"),
	(CP_LESSSLANTEQUAL, "LessSlantEqual"),
	(CP_GREATERSLANTEQUAL, "GreaterSlantEqual"),
	(CP_NESTEDLESSLESS, "NestedLessLess"),
	(CP_NESTEDGREATERGREATER, "NestedGreaterGreater"),
	(CP_PRECEDESEQUAL, "PrecedesEqual"),
	(CP_SUCCEEDSEQUAL, "SucceedsEqual"),
	(CP_DOUBLELEFTTEE, "DoubleLeftTee"),
	(CP_COMPATIBILITYKANJISPACE, "COMPATIBILITYKanjiSpace"),
	(CP_LEFTDOUBLEBRACKET, "LeftDoubleBracket"),
	(CP_RIGHTDOUBLEBRACKET, "RightDoubleBracket"),
	(CP_LEFTASSOCIATION, "LeftAssociation"),
	(CP_RIGHTASSOCIATION, "RightAssociation"),
	(CP_SHAH, "Shah"),
	(CP_WOLFRAMLANGUAGELOGO, "WolframLanguageLogo"),
	(CP_WOLFRAMLANGUAGELOGOCIRCLE, "WolframLanguageLogoCircle"),
	(CP_TWOWAYRULE, "TwoWayRule"),
	(CP_FREEFORMPROMPT, "FreeformPrompt"),
	(CP_WOLFRAMALPHAPROMPT, "WolframAlphaPrompt"),
	(CP_INVISIBLESPACE, "InvisibleSpace"),
	(CP_PIECEWISE, "Piecewise"),
	(CP_NEGATIVEVERYTHINSPACE, "NegativeVeryThinSpace"),
	(CP_NEGATIVETHINSPACE, "NegativeThinSpace"),
	(CP_NEGATIVEMEDIUMSPACE, "NegativeMediumSpace"),
	(CP_NEGATIVETHICKSPACE, "NegativeThickSpace"),
	(CP_IMPLICITPLUS, "ImplicitPlus"),
	(CP_NULL, "Null"),
	(CP_COMPATIBILITYNOBREAK, "COMPATIBILITYNoBreak"),
	(CP_INDENTINGNEWLINE, "IndentingNewLine"),
	(CP_AUTOPLACEHOLDER, "AutoPlaceholder"),
	(CP_AUTOLEFTMATCH, "AutoLeftMatch"),
	(CP_AUTORIGHTMATCH, "AutoRightMatch"),
	(CP_AUTOSPACE, "AutoSpace"),
	(CP_AUTOOPERAND, "AutoOperand"),
	(CP_SYSTEMSMODELDELAY, "SystemsModelDelay"),
	(CP_CONTINUATION, "Continuation"),
	(CP_ROUNDSPACEINDICATOR, "RoundSpaceIndicator"),
	(CP_INVISIBLEPREFIXSCRIPTBASE, "InvisiblePrefixScriptBase"),
	(CP_INVISIBLEPOSTFIXSCRIPTBASE, "InvisiblePostfixScriptBase"),
	(CP_ENTITYSTART, "EntityStart"),
	(CP_ENTITYEND, "EntityEnd"),
	(CP_SPANFROMLEFT, "SpanFromLeft"),
	(CP_SPANFROMABOVE, "SpanFromAbove"),
	(CP_SPANFROMBOTH, "SpanFromBoth"),
	(CP_PAGEBREAKABOVE, "PageBreakAbove"),
	(CP_PAGEBREAKBELOW, "PageBreakBelow"),
	(CP_DISCRETIONARYPAGEBREAKABOVE, "DiscretionaryPageBreakAbove"),
	(CP_DISCRETIONARYPAGEBREAKBELOW, "DiscretionaryPageBreakBelow"),
	(CP_TRANSPOSE, "Transpose"),
	(CP_CONJUGATE, "Conjugate"),
	(CP_CONJUGATETRANSPOSE, "ConjugateTranspose"),
	(CP_STEPPERRIGHT, "StepperRight"),
	(CP_STEPPERLEFT, "StepperLeft"),
	(CP_STEPPERUP, "StepperUp"),
	(CP_STEPPERDOWN, "StepperDown"),
	(CP_HERMITIANCONJUGATE, "HermitianConjugate"),
	(CP_VERTICALBAR, "VerticalBar"),
	(CP_NOTVERTICALBAR, "NotVerticalBar"),
	(CP_DISTRIBUTED, "Distributed"),
	(CP_CONDITIONED, "Conditioned"),
	(CP_UNDIRECTEDEDGE, "UndirectedEdge"),
	(CP_DIRECTEDEDGE, "DirectedEdge"),
	(CP_CONTINUEDFRACTIONK, "ContinuedFractionK"),
	(CP_TENSORPRODUCT, "TensorProduct"),
	(CP_TENSORWEDGE, "TensorWedge"),
	(CP_PROBABILITYPR, "ProbabilityPr"),
	(CP_EXPECTATIONE, "ExpectationE"),
	(CP_PERMUTATIONPRODUCT, "PermutationProduct"),
	(CP_EARTH, "Earth"),
	(CP_NOTEQUALTILDE, "NotEqualTilde"),
	(CP_NOTHUMPEQUAL, "NotHumpEqual"),
	(CP_NOTHUMPDOWNHUMP, "NotHumpDownHump"),
	(CP_NOTLEFTTRIANGLEBAR, "NotLeftTriangleBar"),
	(CP_NOTRIGHTTRIANGLEBAR, "NotRightTriangleBar"),
	(CP_NOTLESSLESS, "NotLessLess"),
	(CP_NOTNESTEDLESSLESS, "NotNestedLessLess"),
	(CP_NOTLESSSLANTEQUAL, "NotLessSlantEqual"),
	(CP_NOTGREATERGREATER, "NotGreaterGreater"),
	(CP_NOTNESTEDGREATERGREATER, "NotNestedGreaterGreater"),
	(CP_NOTGREATERSLANTEQUAL, "NotGreaterSlantEqual"),
	(CP_NOTPRECEDESEQUAL, "NotPrecedesEqual"),
	(CP_NOTSUCCEEDSEQUAL, "NotSucceedsEqual"),
	(CP_NOTSQUARESUBSET, "NotSquareSubset"),
	(CP_NOTSQUARESUPERSET, "NotSquareSuperset"),
	(CP_EQUAL, "Equal"),
	(CP_VERTICALSEPARATOR, "VerticalSeparator"),
	(CP_VECTORGREATER, "VectorGreater"),
	(CP_VECTORGREATEREQUAL, "VectorGreaterEqual"),
	(CP_VECTORLESS, "VectorLess"),
	(CP_VECTORLESSEQUAL, "VectorLessEqual"),
	(CP_LIMIT, "Limit"),
	(CP_MAXLIMIT, "MaxLimit"),
	(CP_MINLIMIT, "MinLimit"),
	(CP_CROSS, "Cross"),
	(CP_FUNCTION, "Function"),
	(CP_XNOR, "Xnor"),
	(CP_DISCRETESHIFT, "DiscreteShift"),
	(CP_DIFFERENCEDELTA, "DifferenceDelta"),
	(CP_DISCRETERATIO, "DiscreteRatio"),
	(CP_INLINEPART, "InlinePart"),
	(CP_RULEDELAYED, "RuleDelayed"),
	(CP_SQUARE, "Square"),
	(CP_RULE, "Rule"),
	(CP_IMPLIES, "Implies"),
	(CP_SHORTRIGHTARROW, "ShortRightArrow"),
	(CP_SHORTLEFTARROW, "ShortLeftArrow"),
	(CP_SELECTIONPLACEHOLDER, "SelectionPlaceholder"),
	(CP_PLACEHOLDER, "Placeholder"),
	(CP_SHORTUPARROW, "ShortUpArrow"),
	(CP_SHORTDOWNARROW, "ShortDownArrow"),
	(CP_APPLICATION, "Application"),
	(CP_LEFTBRACKETINGBAR, "LeftBracketingBar"),
	(CP_RIGHTBRACKETINGBAR, "RightBracketingBar"),
	(CP_LEFTDOUBLEBRACKETINGBAR, "LeftDoubleBracketingBar"),
	(CP_RIGHTDOUBLEBRACKETINGBAR, "RightDoubleBracketingBar"),
	(CP_SCRIPTA, "ScriptA"),
	(CP_SCRIPTB, "ScriptB"),
	(CP_SCRIPTC, "ScriptC"),
	(CP_SCRIPTD, "ScriptD"),
	(CP_SCRIPTF, "ScriptF"),
	(CP_SCRIPTH, "ScriptH"),
	(CP_SCRIPTI, "ScriptI"),
	(CP_SCRIPTJ, "ScriptJ"),
	(CP_SCRIPTK, "ScriptK"),
	(CP_SCRIPTM, "ScriptM"),
	(CP_SCRIPTN, "ScriptN"),
	(CP_SCRIPTP, "ScriptP"),
	(CP_SCRIPTQ, "ScriptQ"),
	(CP_SCRIPTR, "ScriptR"),
	(CP_SCRIPTS, "ScriptS"),
	(CP_SCRIPTT, "ScriptT"),
	(CP_SCRIPTU, "ScriptU"),
	(CP_SCRIPTV, "ScriptV"),
	(CP_SCRIPTW, "ScriptW"),
	(CP_SCRIPTX, "ScriptX"),
	(CP_SCRIPTY, "ScriptY"),
	(CP_SCRIPTZ, "ScriptZ"),
	(CP_GOTHICA, "GothicA"),
	(CP_GOTHICB, "GothicB"),
	(CP_GOTHICC, "GothicC"),
	(CP_GOTHICD, "GothicD"),
	(CP_GOTHICE, "GothicE"),
	(CP_GOTHICF, "GothicF"),
	(CP_GOTHICG, "GothicG"),
	(CP_GOTHICH, "GothicH"),
	(CP_GOTHICI, "GothicI"),
	(CP_GOTHICJ, "GothicJ"),
	(CP_GOTHICK, "GothicK"),
	(CP_GOTHICL, "GothicL"),
	(CP_GOTHICM, "GothicM"),
	(CP_GOTHICN, "GothicN"),
	(CP_GOTHICO, "GothicO"),
	(CP_GOTHICP, "GothicP"),
	(CP_GOTHICQ, "GothicQ"),
	(CP_GOTHICR, "GothicR"),
	(CP_GOTHICS, "GothicS"),
	(CP_GOTHICT, "GothicT"),
	(CP_GOTHICU, "GothicU"),
	(CP_GOTHICV, "GothicV"),
	(CP_GOTHICW, "GothicW"),
	(CP_GOTHICX, "GothicX"),
	(CP_GOTHICY, "GothicY"),
	(CP_GOTHICZ, "GothicZ"),
	(CP_DOUBLESTRUCKA, "DoubleStruckA"),
	(CP_DOUBLESTRUCKB, "DoubleStruckB"),
	(CP_DOUBLESTRUCKC, "DoubleStruckC"),
	(CP_DOUBLESTRUCKD, "DoubleStruckD"),
	(CP_DOUBLESTRUCKE, "DoubleStruckE"),
	(CP_DOUBLESTRUCKF, "DoubleStruckF"),
	(CP_DOUBLESTRUCKG, "DoubleStruckG"),
	(CP_DOUBLESTRUCKH, "DoubleStruckH"),
	(CP_DOUBLESTRUCKI, "DoubleStruckI"),
	(CP_DOUBLESTRUCKJ, "DoubleStruckJ"),
	(CP_DOUBLESTRUCKK, "DoubleStruckK"),
	(CP_DOUBLESTRUCKL, "DoubleStruckL"),
	(CP_DOUBLESTRUCKM, "DoubleStruckM"),
	(CP_DOUBLESTRUCKN, "DoubleStruckN"),
	(CP_DOUBLESTRUCKO, "DoubleStruckO"),
	(CP_DOUBLESTRUCKP, "DoubleStruckP"),
	(CP_DOUBLESTRUCKQ, "DoubleStruckQ"),
	(CP_DOUBLESTRUCKR, "DoubleStruckR"),
	(CP_DOUBLESTRUCKS, "DoubleStruckS"),
	(CP_DOUBLESTRUCKT, "DoubleStruckT"),
	(CP_DOUBLESTRUCKU, "DoubleStruckU"),
	(CP_DOUBLESTRUCKV, "DoubleStruckV"),
	(CP_DOUBLESTRUCKW, "DoubleStruckW"),
	(CP_DOUBLESTRUCKX, "DoubleStruckX"),
	(CP_DOUBLESTRUCKY, "DoubleStruckY"),
	(CP_DOUBLESTRUCKZ, "DoubleStruckZ"),
	(CP_DOTLESSJ, "DotlessJ"),
	(CP_WOLF, "Wolf"),
	(CP_FREAKEDSMILEY, "FreakedSmiley"),
	(CP_NEUTRALSMILEY, "NeutralSmiley"),
	(CP_LIGHTBULB, "LightBulb"),
	(CP_NUMBERSIGN, "NumberSign"),
	(CP_WARNINGSIGN, "WarningSign"),
	(CP_VILLA, "Villa"),
	(CP_AKUZ, "Akuz"),
	(CP_ANDY, "Andy"),
	(CP_SPOOKY, "Spooky"),
	(CP_SCRIPTDOTLESSI, "ScriptDotlessI"),
	(CP_SCRIPTDOTLESSJ, "ScriptDotlessJ"),
	(CP_DOUBLEDPI, "DoubledPi"),
	(CP_DOUBLEDGAMMA, "DoubledGamma"),
	(CP_CAPITALDIFFERENTIALD, "CapitalDifferentialD"),
	(CP_DIFFERENTIALD, "DifferentialD"),
	(CP_EXPONENTIALE, "ExponentialE"),
	(CP_IMAGINARYI, "ImaginaryI"),
	(CP_IMAGINARYJ, "ImaginaryJ"),
	(CP_FILLEDSMALLCIRCLE, "FilledSmallCircle"),
	(CP_DOTTEDSQUARE, "DottedSquare"),
	(CP_GRAYSQUARE, "GraySquare"),
	(CP_GRAYCIRCLE, "GrayCircle"),
	(CP_LETTERSPACE, "LetterSpace"),
	(CP_DOWNBREVE, "DownBreve"),
	(CP_KERNELICON, "KernelIcon"),
	(CP_MATHEMATICAICON, "MathematicaIcon"),
	(CP_TRIPLEDOT, "TripleDot"),
	(CP_SYSTEMENTERKEY, "SystemEnterKey"),
	(CP_ALIGNMENTMARKER, "AlignmentMarker"),
	(CP_LEFTSKELETON, "LeftSkeleton"),
	(CP_RIGHTSKELETON, "RightSkeleton"),
	(CP_CONTROLKEY, "ControlKey"),
	(CP_ALIASDELIMITER, "AliasDelimiter"),
	(CP_INVISIBLECOMMA, "InvisibleComma"),
	(CP_RETURNKEY, "ReturnKey"),
	(CP_ERRORINDICATOR, "ErrorIndicator"),
	(CP_ALIASINDICATOR, "AliasIndicator"),
	(CP_ESCAPEKEY, "EscapeKey"),
	(CP_COMMANDKEY, "CommandKey"),
	(CP_LEFTMODIFIED, "LeftModified"),
	(CP_RIGHTMODIFIED, "RightModified"),
	(CP_INVISIBLEAPPLICATION, "InvisibleApplication"),
	(CP_DISCRETIONARYLINESEPARATOR, "DiscretionaryLineSeparator"),
	(CP_DISCRETIONARYPARAGRAPHSEPARATOR, "DiscretionaryParagraphSeparator"),
	(CP_SCRIPTCAPITALA, "ScriptCapitalA"),
	(CP_SCRIPTCAPITALC, "ScriptCapitalC"),
	(CP_SCRIPTCAPITALD, "ScriptCapitalD"),
	(CP_SCRIPTCAPITALG, "ScriptCapitalG"),
	(CP_SCRIPTCAPITALJ, "ScriptCapitalJ"),
	(CP_SCRIPTCAPITALK, "ScriptCapitalK"),
	(CP_SCRIPTCAPITALN, "ScriptCapitalN"),
	(CP_SCRIPTCAPITALO, "ScriptCapitalO"),
	(CP_SCRIPTCAPITALP, "ScriptCapitalP"),
	(CP_SCRIPTCAPITALQ, "ScriptCapitalQ"),
	(CP_SCRIPTCAPITALS, "ScriptCapitalS"),
	(CP_SCRIPTCAPITALT, "ScriptCapitalT"),
	(CP_SCRIPTCAPITALU, "ScriptCapitalU"),
	(CP_SCRIPTCAPITALV, "ScriptCapitalV"),
	(CP_SCRIPTCAPITALW, "ScriptCapitalW"),
	(CP_SCRIPTCAPITALX, "ScriptCapitalX"),
	(CP_SCRIPTCAPITALY, "ScriptCapitalY"),
	(CP_SCRIPTCAPITALZ, "ScriptCapitalZ"),
	(CP_GOTHICCAPITALA, "GothicCapitalA"),
	(CP_GOTHICCAPITALB, "GothicCapitalB"),
	(CP_GOTHICCAPITALD, "GothicCapitalD"),
	(CP_GOTHICCAPITALE, "GothicCapitalE"),
	(CP_GOTHICCAPITALF, "GothicCapitalF"),
	(CP_GOTHICCAPITALG, "GothicCapitalG"),
	(CP_GOTHICCAPITALJ, "GothicCapitalJ"),
	(CP_GOTHICCAPITALK, "GothicCapitalK"),
	(CP_GOTHICCAPITALL, "GothicCapitalL"),
	(CP_GOTHICCAPITALM, "GothicCapitalM"),
	(CP_GOTHICCAPITALN, "GothicCapitalN"),
	(CP_GOTHICCAPITALO, "GothicCapitalO"),
	(CP_GOTHICCAPITALP, "GothicCapitalP"),
	(CP_GOTHICCAPITALQ, "GothicCapitalQ"),
	(CP_GOTHICCAPITALS, "GothicCapitalS"),
	(CP_GOTHICCAPITALT, "GothicCapitalT"),
	(CP_GOTHICCAPITALU, "GothicCapitalU"),
	(CP_GOTHICCAPITALV, "GothicCapitalV"),
	(CP_GOTHICCAPITALW, "GothicCapitalW"),
	(CP_GOTHICCAPITALX, "GothicCapitalX"),
	(CP_GOTHICCAPITALY, "GothicCapitalY"),
	(CP_DOUBLESTRUCKCAPITALA, "DoubleStruckCapitalA"),
	(CP_DOUBLESTRUCKCAPITALB, "DoubleStruckCapitalB"),
	(CP_DOUBLESTRUCKCAPITALC, "DoubleStruckCapitalC"),
	(CP_DOUBLESTRUCKCAPITALD, "DoubleStruckCapitalD"),
	(CP_DOUBLESTRUCKCAPITALE, "DoubleStruckCapitalE"),
	(CP_DOUBLESTRUCKCAPITALF, "DoubleStruckCapitalF"),
	(CP_DOUBLESTRUCKCAPITALG, "DoubleStruckCapitalG"),
	(CP_DOUBLESTRUCKCAPITALH, "DoubleStruckCapitalH"),
	(CP_DOUBLESTRUCKCAPITALI, "DoubleStruckCapitalI"),
	(CP_DOUBLESTRUCKCAPITALJ, "DoubleStruckCapitalJ"),
	(CP_DOUBLESTRUCKCAPITALK, "DoubleStruckCapitalK"),
	(CP_DOUBLESTRUCKCAPITALL, "DoubleStruckCapitalL"),
	(CP_DOUBLESTRUCKCAPITALM, "DoubleStruckCapitalM"),
	(CP_DOUBLESTRUCKCAPITALN, "DoubleStruckCapitalN"),
	(CP_DOUBLESTRUCKCAPITALO, "DoubleStruckCapitalO"),
	(CP_DOUBLESTRUCKCAPITALP, "DoubleStruckCapitalP"),
	(CP_DOUBLESTRUCKCAPITALQ, "DoubleStruckCapitalQ"),
	(CP_DOUBLESTRUCKCAPITALR, "DoubleStruckCapitalR"),
	(CP_DOUBLESTRUCKCAPITALS, "DoubleStruckCapitalS"),
	(CP_DOUBLESTRUCKCAPITALT, "DoubleStruckCapitalT"),
	(CP_DOUBLESTRUCKCAPITALU, "DoubleStruckCapitalU"),
	(CP_DOUBLESTRUCKCAPITALV, "DoubleStruckCapitalV"),
	(CP_DOUBLESTRUCKCAPITALW, "DoubleStruckCapitalW"),
	(CP_DOUBLESTRUCKCAPITALX, "DoubleStruckCapitalX"),
	(CP_DOUBLESTRUCKCAPITALY, "DoubleStruckCapitalY"),
	(CP_DOUBLESTRUCKCAPITALZ, "DoubleStruckCapitalZ"),
	(CP_TABKEY, "TabKey"),
	(CP_SPACEKEY, "SpaceKey"),
	(CP_DELETEKEY, "DeleteKey"),
	(CP_ALTKEY, "AltKey"),
	(CP_OPTIONKEY, "OptionKey"),
	(CP_KEYBAR, "KeyBar"),
	(CP_ENTERKEY, "EnterKey"),
	(CP_SHIFTKEY, "ShiftKey"),
	(CP_MOD1KEY, "Mod1Key"),
	(CP_MOD2KEY, "Mod2Key"),
	(CP_LONGEQUAL, "LongEqual"),
	(CP_CONSTANTC, "ConstantC"),
	(CP_DOUBLESTRUCKZERO, "DoubleStruckZero"),
	(CP_DOUBLESTRUCKONE, "DoubleStruckOne"),
	(CP_DOUBLESTRUCKTWO, "DoubleStruckTwo"),
	(CP_DOUBLESTRUCKTHREE, "DoubleStruckThree"),
	(CP_DOUBLESTRUCKFOUR, "DoubleStruckFour"),
	(CP_DOUBLESTRUCKFIVE, "DoubleStruckFive"),
	(CP_DOUBLESTRUCKSIX, "DoubleStruckSix"),
	(CP_DOUBLESTRUCKSEVEN, "DoubleStruckSeven"),
	(CP_DOUBLESTRUCKEIGHT, "DoubleStruckEight"),
	(CP_DOUBLESTRUCKNINE, "DoubleStruckNine"),
	(CP_GOTHICZERO, "GothicZero"),
	(CP_GOTHICONE, "GothicOne"),
	(CP_GOTHICTWO, "GothicTwo"),
	(CP_GOTHICTHREE, "GothicThree"),
	(CP_GOTHICFOUR, "GothicFour"),
	(CP_GOTHICFIVE, "GothicFive"),
	(CP_GOTHICSIX, "GothicSix"),
	(CP_GOTHICSEVEN, "GothicSeven"),
	(CP_GOTHICEIGHT, "GothicEight"),
	(CP_GOTHICNINE, "GothicNine"),
	(CP_SCRIPTZERO, "ScriptZero"),
	(CP_SCRIPTONE, "ScriptOne"),
	(CP_SCRIPTTWO, "ScriptTwo"),
	(CP_SCRIPTTHREE, "ScriptThree"),
	(CP_SCRIPTFOUR, "ScriptFour"),
	(CP_SCRIPTFIVE, "ScriptFive"),
	(CP_SCRIPTSIX, "ScriptSix"),
	(CP_SCRIPTSEVEN, "ScriptSeven"),
	(CP_SCRIPTEIGHT, "ScriptEight"),
	(CP_SCRIPTNINE, "ScriptNine"),
	(CP_FIRSTPAGE, "FirstPage"),
	(CP_LASTPAGE, "LastPage"),
	(CP_NUMBERCOMMA, "NumberComma"),
	(CP_FORMALA, "FormalA"),
	(CP_FORMALB, "FormalB"),
	(CP_FORMALC, "FormalC"),
	(CP_FORMALD, "FormalD"),
	(CP_FORMALE, "FormalE"),
	(CP_FORMALF, "FormalF"),
	(CP_FORMALG, "FormalG"),
	(CP_FORMALH, "FormalH"),
	(CP_FORMALI, "FormalI"),
	(CP_FORMALJ, "FormalJ"),
	(CP_FORMALK, "FormalK"),
	(CP_FORMALL, "FormalL"),
	(CP_FORMALM, "FormalM"),
	(CP_FORMALN, "FormalN"),
	(CP_FORMALO, "FormalO"),
	(CP_FORMALP, "FormalP"),
	(CP_FORMALQ, "FormalQ"),
	(CP_FORMALR, "FormalR"),
	(CP_FORMALS, "FormalS"),
	(CP_FORMALT, "FormalT"),
	(CP_FORMALU, "FormalU"),
	(CP_FORMALV, "FormalV"),
	(CP_FORMALW, "FormalW"),
	(CP_FORMALX, "FormalX"),
	(CP_FORMALY, "FormalY"),
	(CP_FORMALZ, "FormalZ"),
	(CP_FORMALCAPITALA, "FormalCapitalA"),
	(CP_FORMALCAPITALB, "FormalCapitalB"),
	(CP_FORMALCAPITALC, "FormalCapitalC"),
	(CP_FORMALCAPITALD, "FormalCapitalD"),
	(CP_FORMALCAPITALE, "FormalCapitalE"),
	(CP_FORMALCAPITALF, "FormalCapitalF"),
	(CP_FORMALCAPITALG, "FormalCapitalG"),
	(CP_FORMALCAPITALH, "FormalCapitalH"),
	(CP_FORMALCAPITALI, "FormalCapitalI"),
	(CP_FORMALCAPITALJ, "FormalCapitalJ"),
	(CP_FORMALCAPITALK, "FormalCapitalK"),
	(CP_FORMALCAPITALL, "FormalCapitalL"),
	(CP_FORMALCAPITALM, "FormalCapitalM"),
	(CP_FORMALCAPITALN, "FormalCapitalN"),
	(CP_FORMALCAPITALO, "FormalCapitalO"),
	(CP_FORMALCAPITALP, "FormalCapitalP"),
	(CP_FORMALCAPITALQ, "FormalCapitalQ"),
	(CP_FORMALCAPITALR, "FormalCapitalR"),
	(CP_FORMALCAPITALS, "FormalCapitalS"),
	(CP_FORMALCAPITALT, "FormalCapitalT"),
	(CP_FORMALCAPITALU, "FormalCapitalU"),
	(CP_FORMALCAPITALV, "FormalCapitalV"),
	(CP_FORMALCAPITALW, "FormalCapitalW"),
	(CP_FORMALCAPITALX, "FormalCapitalX"),
	(CP_FORMALCAPITALY, "FormalCapitalY"),
	(CP_FORMALCAPITALZ, "FormalCapitalZ"),
	(CP_FORMALCAPITALALPHA, "FormalCapitalAlpha"),
	(CP_FORMALCAPITALBETA, "FormalCapitalBeta"),
	(CP_FORMALCAPITALGAMMA, "FormalCapitalGamma"),
	(CP_FORMALCAPITALDELTA, "FormalCapitalDelta"),
	(CP_FORMALCAPITALEPSILON, "FormalCapitalEpsilon"),
	(CP_FORMALCAPITALZETA, "FormalCapitalZeta"),
	(CP_FORMALCAPITALETA, "FormalCapitalEta"),
	(CP_FORMALCAPITALTHETA, "FormalCapitalTheta"),
	(CP_FORMALCAPITALIOTA, "FormalCapitalIota"),
	(CP_FORMALCAPITALKAPPA, "FormalCapitalKappa"),
	(CP_FORMALCAPITALLAMBDA, "FormalCapitalLambda"),
	(CP_FORMALCAPITALMU, "FormalCapitalMu"),
	(CP_FORMALCAPITALNU, "FormalCapitalNu"),
	(CP_FORMALCAPITALXI, "FormalCapitalXi"),
	(CP_FORMALCAPITALOMICRON, "FormalCapitalOmicron"),
	(CP_FORMALCAPITALPI, "FormalCapitalPi"),
	(CP_FORMALCAPITALRHO, "FormalCapitalRho"),
	(CP_FORMALCAPITALSIGMA, "FormalCapitalSigma"),
	(CP_FORMALCAPITALTAU, "FormalCapitalTau"),
	(CP_FORMALCAPITALUPSILON, "FormalCapitalUpsilon"),
	(CP_FORMALCAPITALPHI, "FormalCapitalPhi"),
	(CP_FORMALCAPITALCHI, "FormalCapitalChi"),
	(CP_FORMALCAPITALPSI, "FormalCapitalPsi"),
	(CP_FORMALCAPITALOMEGA, "FormalCapitalOmega"),
	(CP_FORMALALPHA, "FormalAlpha"),
	(CP_FORMALBETA, "FormalBeta"),
	(CP_FORMALGAMMA, "FormalGamma"),
	(CP_FORMALDELTA, "FormalDelta"),
	(CP_FORMALCURLYEPSILON, "FormalCurlyEpsilon"),
	(CP_FORMALZETA, "FormalZeta"),
	(CP_FORMALETA, "FormalEta"),
	(CP_FORMALTHETA, "FormalTheta"),
	(CP_FORMALIOTA, "FormalIota"),
	(CP_FORMALKAPPA, "FormalKappa"),
	(CP_FORMALLAMBDA, "FormalLambda"),
	(CP_FORMALMU, "FormalMu"),
	(CP_FORMALNU, "FormalNu"),
	(CP_FORMALXI, "FormalXi"),
	(CP_FORMALOMICRON, "FormalOmicron"),
	(CP_FORMALPI, "FormalPi"),
	(CP_FORMALRHO, "FormalRho"),
	(CP_FORMALFINALSIGMA, "FormalFinalSigma"),
	(CP_FORMALSIGMA, "FormalSigma"),
	(CP_FORMALTAU, "FormalTau"),
	(CP_FORMALUPSILON, "FormalUpsilon"),
	(CP_FORMALCURLYPHI, "FormalCurlyPhi"),
	(CP_FORMALCHI, "FormalChi"),
	(CP_FORMALPSI, "FormalPsi"),
	(CP_FORMALOMEGA, "FormalOmega"),
	(CP_FORMALCURLYTHETA, "FormalCurlyTheta"),
	(CP_FORMALCURLYCAPITALUPSILON, "FormalCurlyCapitalUpsilon"),
	(CP_FORMALPHI, "FormalPhi"),
	(CP_FORMALCURLYPI, "FormalCurlyPi"),
	(CP_FORMALCAPITALSTIGMA, "FormalCapitalStigma"),
	(CP_FORMALSTIGMA, "FormalStigma"),
	(CP_FORMALCAPITALDIGAMMA, "FormalCapitalDigamma"),
	(CP_FORMALDIGAMMA, "FormalDigamma"),
	(CP_FORMALCAPITALKOPPA, "FormalCapitalKoppa"),
	(CP_FORMALKOPPA, "FormalKoppa"),
	(CP_FORMALCAPITALSAMPI, "FormalCapitalSampi"),
	(CP_FORMALSAMPI, "FormalSampi"),
	(CP_FORMALCURLYKAPPA, "FormalCurlyKappa"),
	(CP_FORMALCURLYRHO, "FormalCurlyRho"),
	(CP_FORMALEPSILON, "FormalEpsilon"),
	(CP_FILIGATURE, "FiLigature"),
	(CP_FLLIGATURE, "FlLigature"),
	(CP_OVERPARENTHESIS, "OverParenthesis"),
	(CP_UNDERPARENTHESIS, "UnderParenthesis"),
	(CP_OVERBRACE, "OverBrace"),
	(CP_UNDERBRACE, "UnderBrace"),
	(CP_UNKNOWNGLYPH, "UnknownGlyph"),
	(CP_FORMALSCRIPTA, "FormalScriptA"),
	(CP_FORMALSCRIPTB, "FormalScriptB"),
	(CP_FORMALSCRIPTC, "FormalScriptC"),
	(CP_FORMALSCRIPTD, "FormalScriptD"),
	(CP_FORMALSCRIPTE, "FormalScriptE"),
	(CP_FORMALSCRIPTF, "FormalScriptF"),
	(CP_FORMALSCRIPTG, "FormalScriptG"),
	(CP_FORMALSCRIPTH, "FormalScriptH"),
	(CP_FORMALSCRIPTI, "FormalScriptI"),
	(CP_FORMALSCRIPTJ, "FormalScriptJ"),
	(CP_FORMALSCRIPTK, "FormalScriptK"),
	(CP_FORMALSCRIPTL, "FormalScriptL"),
	(CP_FORMALSCRIPTM, "FormalScriptM"),
	(CP_FORMALSCRIPTN, "FormalScriptN"),
	(CP_FORMALSCRIPTO, "FormalScriptO"),
	(CP_FORMALSCRIPTP, "FormalScriptP"),
	(CP_FORMALSCRIPTQ, "FormalScriptQ"),
	(CP_FORMALSCRIPTR, "FormalScriptR"),
	(CP_FORMALSCRIPTS, "FormalScriptS"),
	(CP_FORMALSCRIPTT, "FormalScriptT"),
	(CP_FORMALSCRIPTU, "FormalScriptU"),
	(CP_FORMALSCRIPTV, "FormalScriptV"),
	(CP_FORMALSCRIPTW, "FormalScriptW"),
	(CP_FORMALSCRIPTX, "FormalScriptX"),
	(CP_FORMALSCRIPTY, "FormalScriptY"),
	(CP_FORMALSCRIPTZ, "FormalScriptZ"),
	(CP_FORMALSCRIPTCAPITALA, "FormalScriptCapitalA"),
	(CP_FORMALSCRIPTCAPITALB, "FormalScriptCapitalB"),
	(CP_FORMALSCRIPTCAPITALC, "FormalScriptCapitalC"),
	(CP_FORMALSCRIPTCAPITALD, "FormalScriptCapitalD"),
	(CP_FORMALSCRIPTCAPITALE, "FormalScriptCapitalE"),
	(CP_FORMALSCRIPTCAPITALF, "FormalScriptCapitalF"),
	(CP_FORMALSCRIPTCAPITALG, "FormalScriptCapitalG"),
	(CP_FORMALSCRIPTCAPITALH, "FormalScriptCapitalH"),
	(CP_FORMALSCRIPTCAPITALI, "FormalScriptCapitalI"),
	(CP_FORMALSCRIPTCAPITALJ, "FormalScriptCapitalJ"),
	(CP_FORMALSCRIPTCAPITALK, "FormalScriptCapitalK"),
	(CP_FORMALSCRIPTCAPITALL, "FormalScriptCapitalL"),
	(CP_FORMALSCRIPTCAPITALM, "FormalScriptCapitalM"),
	(CP_FORMALSCRIPTCAPITALN, "FormalScriptCapitalN"),
	(CP_FORMALSCRIPTCAPITALO, "FormalScriptCapitalO"),
	(CP_FORMALSCRIPTCAPITALP, "FormalScriptCapitalP"),
	(CP_FORMALSCRIPTCAPITALQ, "FormalScriptCapitalQ"),
	(CP_FORMALSCRIPTCAPITALR, "FormalScriptCapitalR"),
	(CP_FORMALSCRIPTCAPITALS, "FormalScriptCapitalS"),
	(CP_FORMALSCRIPTCAPITALT, "FormalScriptCapitalT"),
	(CP_FORMALSCRIPTCAPITALU, "FormalScriptCapitalU"),
	(CP_FORMALSCRIPTCAPITALV, "FormalScriptCapitalV"),
	(CP_FORMALSCRIPTCAPITALW, "FormalScriptCapitalW"),
	(CP_FORMALSCRIPTCAPITALX, "FormalScriptCapitalX"),
	(CP_FORMALSCRIPTCAPITALY, "FormalScriptCapitalY"),
	(CP_FORMALSCRIPTCAPITALZ, "FormalScriptCapitalZ"),
];

/// Look up a CodePoint by its long name string
pub fn longname_to_codepoint(longname: &str) -> Option<CodePoint> {
    LONGNAME_TO_CODEPOINT_MAP.get(longname).copied()
}

/// Look up a long name string by its CodePoint using binary search
pub fn codepoint_to_longname(codepoint: CodePoint) -> Option<&'static str> {
    CODEPOINT_TO_LONGNAME_MAP.binary_search_by_key(&codepoint, |&(cp, _)| cp)
        .ok()
        .map(|index| CODEPOINT_TO_LONGNAME_MAP[index].1)
}

